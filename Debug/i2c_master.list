
i2c_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004600  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004894  08004894  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004894  08004894  00014894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800489c  0800489c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800489c  0800489c  0001489c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080048a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000074  08004918  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004918  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3c2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000214b  00000000  00000000  0002f466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  000315b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00032270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac6f  00000000  00000000  00032e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbaa  00000000  00000000  0004dabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2c4c  00000000  00000000  0005b669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe2b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b70  00000000  00000000  000fe308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004778 	.word	0x08004778

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004778 	.word	0x08004778

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fbba 	bl	8000ce6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f893 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f96f 	bl	8000858 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057a:	f000 f93d 	bl	80007f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800057e:	f000 f8fb 	bl	8000778 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive(&huart2, &uart_buff, 1, 100);
 8000582:	2364      	movs	r3, #100	; 0x64
 8000584:	2201      	movs	r2, #1
 8000586:	493c      	ldr	r1, [pc, #240]	; (8000678 <main+0x110>)
 8000588:	483c      	ldr	r0, [pc, #240]	; (800067c <main+0x114>)
 800058a:	f002 fcff 	bl	8002f8c <HAL_UART_Receive>
	  if (uart_buff == 0xFF){
 800058e:	4b3a      	ldr	r3, [pc, #232]	; (8000678 <main+0x110>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2bff      	cmp	r3, #255	; 0xff
 8000594:	d111      	bne.n	80005ba <main+0x52>
		  HAL_I2C_Master_Transmit(&hi2c1, (0x23 << 1), &command_1, 1, 500);
 8000596:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2301      	movs	r3, #1
 800059e:	4a38      	ldr	r2, [pc, #224]	; (8000680 <main+0x118>)
 80005a0:	2146      	movs	r1, #70	; 0x46
 80005a2:	4838      	ldr	r0, [pc, #224]	; (8000684 <main+0x11c>)
 80005a4:	f000 ff38 	bl	8001418 <HAL_I2C_Master_Transmit>
		  printf("sent command %x\n",slave_add);
 80005a8:	4b37      	ldr	r3, [pc, #220]	; (8000688 <main+0x120>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4619      	mov	r1, r3
 80005ae:	4837      	ldr	r0, [pc, #220]	; (800068c <main+0x124>)
 80005b0:	f003 f98c 	bl	80038cc <iprintf>
		  uart_buff = 0;
 80005b4:	4b30      	ldr	r3, [pc, #192]	; (8000678 <main+0x110>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
	  }
	  if (uart_buff == 0xAA){
 80005ba:	4b2f      	ldr	r3, [pc, #188]	; (8000678 <main+0x110>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2baa      	cmp	r3, #170	; 0xaa
 80005c0:	d11d      	bne.n	80005fe <main+0x96>
		  HAL_I2C_Master_Transmit(&hi2c1, (0x23 << 1), &command_2, 1, 500);
 80005c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2301      	movs	r3, #1
 80005ca:	4a31      	ldr	r2, [pc, #196]	; (8000690 <main+0x128>)
 80005cc:	2146      	movs	r1, #70	; 0x46
 80005ce:	482d      	ldr	r0, [pc, #180]	; (8000684 <main+0x11c>)
 80005d0:	f000 ff22 	bl	8001418 <HAL_I2C_Master_Transmit>
		  HAL_I2C_Master_Receive(&hi2c1, (0x23 << 1), &laser_status, 1, 500);
 80005d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	4a2d      	ldr	r2, [pc, #180]	; (8000694 <main+0x12c>)
 80005de:	2146      	movs	r1, #70	; 0x46
 80005e0:	4828      	ldr	r0, [pc, #160]	; (8000684 <main+0x11c>)
 80005e2:	f001 f80d 	bl	8001600 <HAL_I2C_Master_Receive>
		  printf("status = %x\n",laser_status);
 80005e6:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <main+0x12c>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	4619      	mov	r1, r3
 80005ec:	482a      	ldr	r0, [pc, #168]	; (8000698 <main+0x130>)
 80005ee:	f003 f96d 	bl	80038cc <iprintf>
		  laser_status = 0;
 80005f2:	4b28      	ldr	r3, [pc, #160]	; (8000694 <main+0x12c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
		  uart_buff = 0;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <main+0x110>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	  }
	  if (uart_buff == 0xBB){
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <main+0x110>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2bbb      	cmp	r3, #187	; 0xbb
 8000604:	d1bd      	bne.n	8000582 <main+0x1a>
		  HAL_I2C_Master_Transmit(&hi2c1, (0x23 << 1), &command_1, 1, 500);
 8000606:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2301      	movs	r3, #1
 800060e:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <main+0x118>)
 8000610:	2146      	movs	r1, #70	; 0x46
 8000612:	481c      	ldr	r0, [pc, #112]	; (8000684 <main+0x11c>)
 8000614:	f000 ff00 	bl	8001418 <HAL_I2C_Master_Transmit>
		  printf("sent command %x\n",slave_add);
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <main+0x120>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	481b      	ldr	r0, [pc, #108]	; (800068c <main+0x124>)
 8000620:	f003 f954 	bl	80038cc <iprintf>
		  for (int j = 0; j < 10;j++){
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	e01e      	b.n	8000668 <main+0x100>
			  HAL_I2C_Master_Transmit(&hi2c1, (0x23 << 1), &command_2, 1, 500);
 800062a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2301      	movs	r3, #1
 8000632:	4a17      	ldr	r2, [pc, #92]	; (8000690 <main+0x128>)
 8000634:	2146      	movs	r1, #70	; 0x46
 8000636:	4813      	ldr	r0, [pc, #76]	; (8000684 <main+0x11c>)
 8000638:	f000 feee 	bl	8001418 <HAL_I2C_Master_Transmit>
			  HAL_I2C_Master_Receive(&hi2c1, (0x23 << 1), &laser_status, 1, 500);
 800063c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	4a13      	ldr	r2, [pc, #76]	; (8000694 <main+0x12c>)
 8000646:	2146      	movs	r1, #70	; 0x46
 8000648:	480e      	ldr	r0, [pc, #56]	; (8000684 <main+0x11c>)
 800064a:	f000 ffd9 	bl	8001600 <HAL_I2C_Master_Receive>
			  printf("status = %x\n",laser_status);
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <main+0x12c>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4619      	mov	r1, r3
 8000654:	4810      	ldr	r0, [pc, #64]	; (8000698 <main+0x130>)
 8000656:	f003 f939 	bl	80038cc <iprintf>
			  HAL_Delay(500);
 800065a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065e:	f000 fbb7 	bl	8000dd0 <HAL_Delay>
		  for (int j = 0; j < 10;j++){
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3301      	adds	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b09      	cmp	r3, #9
 800066c:	dddd      	ble.n	800062a <main+0xc2>
		  }
		  uart_buff = 0;
 800066e:	4b02      	ldr	r3, [pc, #8]	; (8000678 <main+0x110>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive(&huart2, &uart_buff, 1, 100);
 8000674:	e785      	b.n	8000582 <main+0x1a>
 8000676:	bf00      	nop
 8000678:	20000090 	.word	0x20000090
 800067c:	200000ec 	.word	0x200000ec
 8000680:	20000000 	.word	0x20000000
 8000684:	200000a0 	.word	0x200000a0
 8000688:	20000002 	.word	0x20000002
 800068c:	08004790 	.word	0x08004790
 8000690:	20000001 	.word	0x20000001
 8000694:	20000091 	.word	0x20000091
 8000698:	080047a4 	.word	0x080047a4

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0a4      	sub	sp, #144	; 0x90
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006a6:	2244      	movs	r2, #68	; 0x44
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 f906 	bl	80038bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2234      	movs	r2, #52	; 0x34
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 f8f8 	bl	80038bc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006cc:	f001 fb06 	bl	8001cdc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <SystemClock_Config+0xd8>)
 80006d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006d6:	4a27      	ldr	r2, [pc, #156]	; (8000774 <SystemClock_Config+0xd8>)
 80006d8:	f023 0318 	bic.w	r3, r3, #24
 80006dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006e4:	f001 fb18 	bl	8001d18 <HAL_PWREx_ControlVoltageScaling>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80006ee:	f000 f90f 	bl	8000910 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006f2:	2314      	movs	r3, #20
 80006f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006f6:	2301      	movs	r3, #1
 80006f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006fa:	2301      	movs	r3, #1
 80006fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000702:	23a0      	movs	r3, #160	; 0xa0
 8000704:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000706:	2300      	movs	r3, #0
 8000708:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fb58 	bl	8001dc4 <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800071a:	f000 f8f9 	bl	8000910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000722:	2300      	movs	r3, #0
 8000724:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000732:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000736:	2101      	movs	r1, #1
 8000738:	4618      	mov	r0, r3
 800073a:	f001 ffa9 	bl	8002690 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000744:	f000 f8e4 	bl	8000910 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000748:	2342      	movs	r3, #66	; 0x42
 800074a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4618      	mov	r0, r3
 8000758:	f002 f9a0 	bl	8002a9c <HAL_RCCEx_PeriphCLKConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000762:	f000 f8d5 	bl	8000910 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000766:	f002 fb1f 	bl	8002da8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800076a:	bf00      	nop
 800076c:	3790      	adds	r7, #144	; 0x90
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000

08000778 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_I2C1_Init+0x74>)
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <MX_I2C1_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_I2C1_Init+0x74>)
 8000784:	4a1b      	ldr	r2, [pc, #108]	; (80007f4 <MX_I2C1_Init+0x7c>)
 8000786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_I2C1_Init+0x74>)
 8000790:	2201      	movs	r2, #1
 8000792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_I2C1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <MX_I2C1_Init+0x74>)
 80007b4:	f000 fda0 	bl	80012f8 <HAL_I2C_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007be:	f000 f8a7 	bl	8000910 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <MX_I2C1_Init+0x74>)
 80007c6:	f001 f9f1 	bl	8001bac <HAL_I2CEx_ConfigAnalogFilter>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d0:	f000 f89e 	bl	8000910 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_I2C1_Init+0x74>)
 80007d8:	f001 fa33 	bl	8001c42 <HAL_I2CEx_ConfigDigitalFilter>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 f895 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000a0 	.word	0x200000a0
 80007f0:	40005400 	.word	0x40005400
 80007f4:	00707cbb 	.word	0x00707cbb

080007f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_USART2_UART_Init+0x58>)
 80007fe:	4a15      	ldr	r2, [pc, #84]	; (8000854 <MX_USART2_UART_Init+0x5c>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800083c:	f002 fac4 	bl	8002dc8 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 f863 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000ec 	.word	0x200000ec
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_GPIO_Init+0x8c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <MX_GPIO_Init+0x8c>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_GPIO_Init+0x8c>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_GPIO_Init+0x8c>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <MX_GPIO_Init+0x8c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_GPIO_Init+0x8c>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_GPIO_Init+0x8c>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <MX_GPIO_Init+0x8c>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_GPIO_Init+0x8c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2108      	movs	r1, #8
 80008ba:	480b      	ldr	r0, [pc, #44]	; (80008e8 <MX_GPIO_Init+0x90>)
 80008bc:	f000 fd04 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008c0:	2308      	movs	r3, #8
 80008c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4619      	mov	r1, r3
 80008d6:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_GPIO_Init+0x90>)
 80008d8:	f000 fb84 	bl	8000fe4 <HAL_GPIO_Init>

}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	48000400 	.word	0x48000400

080008ec <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80008f4:	1d39      	adds	r1, r7, #4
 80008f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008fa:	2201      	movs	r2, #1
 80008fc:	4803      	ldr	r0, [pc, #12]	; (800090c <__io_putchar+0x20>)
 80008fe:	f002 fab1 	bl	8002e64 <HAL_UART_Transmit>

return ch;
 8000902:	687b      	ldr	r3, [r7, #4]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200000ec 	.word	0x200000ec

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x44>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <HAL_MspInit+0x44>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6613      	str	r3, [r2, #96]	; 0x60
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x44>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x44>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6593      	str	r3, [r2, #88]	; 0x58
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a17      	ldr	r2, [pc, #92]	; (80009e0 <HAL_I2C_MspInit+0x7c>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d127      	bne.n	80009d6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <HAL_I2C_MspInit+0x80>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a16      	ldr	r2, [pc, #88]	; (80009e4 <HAL_I2C_MspInit+0x80>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <HAL_I2C_MspInit+0x80>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800099e:	23c0      	movs	r3, #192	; 0xc0
 80009a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a2:	2312      	movs	r3, #18
 80009a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009aa:	2303      	movs	r3, #3
 80009ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ae:	2304      	movs	r3, #4
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	480b      	ldr	r0, [pc, #44]	; (80009e8 <HAL_I2C_MspInit+0x84>)
 80009ba:	f000 fb13 	bl	8000fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_I2C_MspInit+0x80>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_I2C_MspInit+0x80>)
 80009c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009c8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_I2C_MspInit+0x80>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40005400 	.word	0x40005400
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000400 	.word	0x48000400

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a20      	ldr	r2, [pc, #128]	; (8000a8c <HAL_UART_MspInit+0xa0>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d13a      	bne.n	8000a84 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <HAL_UART_MspInit+0xa4>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a12:	4a1f      	ldr	r2, [pc, #124]	; (8000a90 <HAL_UART_MspInit+0xa4>)
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <HAL_UART_MspInit+0xa4>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <HAL_UART_MspInit+0xa4>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <HAL_UART_MspInit+0xa4>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <HAL_UART_MspInit+0xa4>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f000 fac2 	bl	8000fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a72:	2303      	movs	r3, #3
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f000 fab0 	bl	8000fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f956 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	e00a      	b.n	8000b10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000afa:	f3af 8000 	nop.w
 8000afe:	4601      	mov	r1, r0
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	b2ca      	uxtb	r2, r1
 8000b08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf0      	blt.n	8000afa <_read+0x12>
	}

return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e009      	b.n	8000b48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	60ba      	str	r2, [r7, #8]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fed5 	bl	80008ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf1      	blt.n	8000b34 <_write+0x12>
	}
	return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_close>:

int _close(int file)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
	return -1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b82:	605a      	str	r2, [r3, #4]
	return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_isatty>:

int _isatty(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
	return 1;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
	return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f002 fe38 	bl	8003868 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2000a000 	.word	0x2000a000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	20000094 	.word	0x20000094
 8000c2c:	20000188 	.word	0x20000188

08000c30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <SystemInit+0x5c>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <SystemInit+0x5c>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <SystemInit+0x60>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a11      	ldr	r2, [pc, #68]	; (8000c90 <SystemInit+0x60>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <SystemInit+0x60>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <SystemInit+0x60>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <SystemInit+0x60>)
 8000c5c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c60:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <SystemInit+0x60>)
 8000c68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c6c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <SystemInit+0x60>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <SystemInit+0x60>)
 8000c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SystemInit+0x60>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00
 8000c90:	40021000 	.word	0x40021000

08000c94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ccc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c98:	f7ff ffca 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c9e:	e003      	b.n	8000ca8 <LoopCopyDataInit>

08000ca0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ca2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ca4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ca6:	3104      	adds	r1, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ca8:	480a      	ldr	r0, [pc, #40]	; (8000cd4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cb0:	d3f6      	bcc.n	8000ca0 <CopyDataInit>
	ldr	r2, =_sbss
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cb4:	e002      	b.n	8000cbc <LoopFillZerobss>

08000cb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cb8:	f842 3b04 	str.w	r3, [r2], #4

08000cbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <LoopForever+0x16>)
	cmp	r2, r3
 8000cbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cc0:	d3f9      	bcc.n	8000cb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f002 fdd7 	bl	8003874 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cc6:	f7ff fc4f 	bl	8000568 <main>

08000cca <LoopForever>:

LoopForever:
    b LoopForever
 8000cca:	e7fe      	b.n	8000cca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ccc:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000cd0:	080048a4 	.word	0x080048a4
	ldr	r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cd8:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000cdc:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000ce0:	20000184 	.word	0x20000184

08000ce4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC1_2_IRQHandler>

08000ce6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f943 	bl	8000f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 f80e 	bl	8000d18 <HAL_InitTick>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d002      	beq.n	8000d08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	71fb      	strb	r3, [r7, #7]
 8000d06:	e001      	b.n	8000d0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d08:	f7ff fe08 	bl	800091c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_InitTick+0x6c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d023      	beq.n	8000d74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <HAL_InitTick+0x70>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HAL_InitTick+0x6c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f941 	bl	8000fca <HAL_SYSTICK_Config>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10f      	bne.n	8000d6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d809      	bhi.n	8000d68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f000 f919 	bl	8000f92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_InitTick+0x74>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	e007      	b.n	8000d78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e004      	b.n	8000d78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	73fb      	strb	r3, [r7, #15]
 8000d72:	e001      	b.n	8000d78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000000c 	.word	0x2000000c
 8000d88:	20000004 	.word	0x20000004
 8000d8c:	20000008 	.word	0x20000008

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2000000c 	.word	0x2000000c
 8000db4:	20000170 	.word	0x20000170

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000170 	.word	0x20000170

08000dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff ffee 	bl	8000db8 <HAL_GetTick>
 8000ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de8:	d005      	beq.n	8000df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_Delay+0x44>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000df6:	bf00      	nop
 8000df8:	f7ff ffde 	bl	8000db8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d8f7      	bhi.n	8000df8 <HAL_Delay+0x28>
  {
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000000c 	.word	0x2000000c

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	; (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f48:	d301      	bcc.n	8000f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00f      	b.n	8000f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <SysTick_Config+0x40>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f56:	210f      	movs	r1, #15
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f7ff ff8e 	bl	8000e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <SysTick_Config+0x40>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SysTick_Config+0x40>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ff47 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa4:	f7ff ff5c 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff8e 	bl	8000ed0 <NVIC_EncodePriority>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff5d 	bl	8000e7c <__NVIC_SetPriority>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffb0 	bl	8000f38 <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff2:	e14e      	b.n	8001292 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	4013      	ands	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 8140 	beq.w	800128c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d00b      	beq.n	800102c <HAL_GPIO_Init+0x48>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d007      	beq.n	800102c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001020:	2b11      	cmp	r3, #17
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b12      	cmp	r3, #18
 800102a:	d130      	bne.n	800108e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001062:	2201      	movs	r2, #1
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	091b      	lsrs	r3, r3, #4
 8001078:	f003 0201 	and.w	r2, r3, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0xea>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b12      	cmp	r3, #18
 80010cc:	d123      	bne.n	8001116 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	08da      	lsrs	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3208      	adds	r2, #8
 80010d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	220f      	movs	r2, #15
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	691a      	ldr	r2, [r3, #16]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	08da      	lsrs	r2, r3, #3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	6939      	ldr	r1, [r7, #16]
 8001112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0203 	and.w	r2, r3, #3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 809a 	beq.w	800128c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001158:	4b55      	ldr	r3, [pc, #340]	; (80012b0 <HAL_GPIO_Init+0x2cc>)
 800115a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115c:	4a54      	ldr	r2, [pc, #336]	; (80012b0 <HAL_GPIO_Init+0x2cc>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6613      	str	r3, [r2, #96]	; 0x60
 8001164:	4b52      	ldr	r3, [pc, #328]	; (80012b0 <HAL_GPIO_Init+0x2cc>)
 8001166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001170:	4a50      	ldr	r2, [pc, #320]	; (80012b4 <HAL_GPIO_Init+0x2d0>)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800119a:	d013      	beq.n	80011c4 <HAL_GPIO_Init+0x1e0>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a46      	ldr	r2, [pc, #280]	; (80012b8 <HAL_GPIO_Init+0x2d4>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d00d      	beq.n	80011c0 <HAL_GPIO_Init+0x1dc>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a45      	ldr	r2, [pc, #276]	; (80012bc <HAL_GPIO_Init+0x2d8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d007      	beq.n	80011bc <HAL_GPIO_Init+0x1d8>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a44      	ldr	r2, [pc, #272]	; (80012c0 <HAL_GPIO_Init+0x2dc>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d101      	bne.n	80011b8 <HAL_GPIO_Init+0x1d4>
 80011b4:	2303      	movs	r3, #3
 80011b6:	e006      	b.n	80011c6 <HAL_GPIO_Init+0x1e2>
 80011b8:	2307      	movs	r3, #7
 80011ba:	e004      	b.n	80011c6 <HAL_GPIO_Init+0x1e2>
 80011bc:	2302      	movs	r3, #2
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0x1e2>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <HAL_GPIO_Init+0x1e2>
 80011c4:	2300      	movs	r3, #0
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	f002 0203 	and.w	r2, r2, #3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4093      	lsls	r3, r2
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d6:	4937      	ldr	r1, [pc, #220]	; (80012b4 <HAL_GPIO_Init+0x2d0>)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011e4:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001208:	4a2e      	ldr	r2, [pc, #184]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001232:	4a24      	ldr	r2, [pc, #144]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3301      	adds	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa22 f303 	lsr.w	r3, r2, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	f47f aea9 	bne.w	8000ff4 <HAL_GPIO_Init+0x10>
  }
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010000 	.word	0x40010000
 80012b8:	48000400 	.word	0x48000400
 80012bc:	48000800 	.word	0x48000800
 80012c0:	48000c00 	.word	0x48000c00
 80012c4:	40010400 	.word	0x40010400

080012c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
 80012d4:	4613      	mov	r3, r2
 80012d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e081      	b.n	800140e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d106      	bne.n	8001324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fb20 	bl	8000964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2224      	movs	r2, #36	; 0x24
 8001328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001348:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001358:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d107      	bne.n	8001372 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	e006      	b.n	8001380 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800137e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d104      	bne.n	8001392 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001390:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	ea42 0103 	orr.w	r1, r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	021a      	lsls	r2, r3, #8
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69d9      	ldr	r1, [r3, #28]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1a      	ldr	r2, [r3, #32]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0201 	orr.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2220      	movs	r2, #32
 80013fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af02      	add	r7, sp, #8
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	461a      	mov	r2, r3
 8001424:	460b      	mov	r3, r1
 8001426:	817b      	strh	r3, [r7, #10]
 8001428:	4613      	mov	r3, r2
 800142a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b20      	cmp	r3, #32
 8001436:	f040 80da 	bne.w	80015ee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_I2C_Master_Transmit+0x30>
 8001444:	2302      	movs	r3, #2
 8001446:	e0d3      	b.n	80015f0 <HAL_I2C_Master_Transmit+0x1d8>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001450:	f7ff fcb2 	bl	8000db8 <HAL_GetTick>
 8001454:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2319      	movs	r3, #25
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 f9e6 	bl	8001834 <I2C_WaitOnFlagUntilTimeout>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e0be      	b.n	80015f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2221      	movs	r2, #33	; 0x21
 8001476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2210      	movs	r2, #16
 800147e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	893a      	ldrh	r2, [r7, #8]
 8001492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149e:	b29b      	uxth	r3, r3
 80014a0:	2bff      	cmp	r3, #255	; 0xff
 80014a2:	d90e      	bls.n	80014c2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	22ff      	movs	r2, #255	; 0xff
 80014a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	8979      	ldrh	r1, [r7, #10]
 80014b2:	4b51      	ldr	r3, [pc, #324]	; (80015f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 fb48 	bl	8001b50 <I2C_TransferConfig>
 80014c0:	e06c      	b.n	800159c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	8979      	ldrh	r1, [r7, #10]
 80014d4:	4b48      	ldr	r3, [pc, #288]	; (80015f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 fb37 	bl	8001b50 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80014e2:	e05b      	b.n	800159c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	6a39      	ldr	r1, [r7, #32]
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 f9e3 	bl	80018b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e07b      	b.n	80015f0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	781a      	ldrb	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001512:	b29b      	uxth	r3, r3
 8001514:	3b01      	subs	r3, #1
 8001516:	b29a      	uxth	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001520:	3b01      	subs	r3, #1
 8001522:	b29a      	uxth	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152c:	b29b      	uxth	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d034      	beq.n	800159c <HAL_I2C_Master_Transmit+0x184>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001536:	2b00      	cmp	r3, #0
 8001538:	d130      	bne.n	800159c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	2200      	movs	r2, #0
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 f975 	bl	8001834 <I2C_WaitOnFlagUntilTimeout>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e04d      	b.n	80015f0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001558:	b29b      	uxth	r3, r3
 800155a:	2bff      	cmp	r3, #255	; 0xff
 800155c:	d90e      	bls.n	800157c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	22ff      	movs	r2, #255	; 0xff
 8001562:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001568:	b2da      	uxtb	r2, r3
 800156a:	8979      	ldrh	r1, [r7, #10]
 800156c:	2300      	movs	r3, #0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 faeb 	bl	8001b50 <I2C_TransferConfig>
 800157a:	e00f      	b.n	800159c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001580:	b29a      	uxth	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158a:	b2da      	uxtb	r2, r3
 800158c:	8979      	ldrh	r1, [r7, #10]
 800158e:	2300      	movs	r3, #0
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 fada 	bl	8001b50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d19e      	bne.n	80014e4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	6a39      	ldr	r1, [r7, #32]
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 f9c2 	bl	8001934 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e01a      	b.n	80015f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2220      	movs	r2, #32
 80015c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6859      	ldr	r1, [r3, #4]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_I2C_Master_Transmit+0x1e4>)
 80015ce:	400b      	ands	r3, r1
 80015d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2220      	movs	r2, #32
 80015d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80015ee:	2302      	movs	r3, #2
  }
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	80002000 	.word	0x80002000
 80015fc:	fe00e800 	.word	0xfe00e800

08001600 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af02      	add	r7, sp, #8
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	461a      	mov	r2, r3
 800160c:	460b      	mov	r3, r1
 800160e:	817b      	strh	r3, [r7, #10]
 8001610:	4613      	mov	r3, r2
 8001612:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b20      	cmp	r3, #32
 800161e:	f040 80db 	bne.w	80017d8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_I2C_Master_Receive+0x30>
 800162c:	2302      	movs	r3, #2
 800162e:	e0d4      	b.n	80017da <HAL_I2C_Master_Receive+0x1da>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001638:	f7ff fbbe 	bl	8000db8 <HAL_GetTick>
 800163c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2319      	movs	r3, #25
 8001644:	2201      	movs	r2, #1
 8001646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 f8f2 	bl	8001834 <I2C_WaitOnFlagUntilTimeout>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0bf      	b.n	80017da <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2222      	movs	r2, #34	; 0x22
 800165e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2210      	movs	r2, #16
 8001666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	893a      	ldrh	r2, [r7, #8]
 800167a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001686:	b29b      	uxth	r3, r3
 8001688:	2bff      	cmp	r3, #255	; 0xff
 800168a:	d90e      	bls.n	80016aa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	22ff      	movs	r2, #255	; 0xff
 8001690:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001696:	b2da      	uxtb	r2, r3
 8001698:	8979      	ldrh	r1, [r7, #10]
 800169a:	4b52      	ldr	r3, [pc, #328]	; (80017e4 <HAL_I2C_Master_Receive+0x1e4>)
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 fa54 	bl	8001b50 <I2C_TransferConfig>
 80016a8:	e06d      	b.n	8001786 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	8979      	ldrh	r1, [r7, #10]
 80016bc:	4b49      	ldr	r3, [pc, #292]	; (80017e4 <HAL_I2C_Master_Receive+0x1e4>)
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 fa43 	bl	8001b50 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80016ca:	e05c      	b.n	8001786 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	6a39      	ldr	r1, [r7, #32]
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 f96b 	bl	80019ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e07c      	b.n	80017da <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fc:	3b01      	subs	r3, #1
 80016fe:	b29a      	uxth	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001708:	b29b      	uxth	r3, r3
 800170a:	3b01      	subs	r3, #1
 800170c:	b29a      	uxth	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001716:	b29b      	uxth	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d034      	beq.n	8001786 <HAL_I2C_Master_Receive+0x186>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	2b00      	cmp	r3, #0
 8001722:	d130      	bne.n	8001786 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	6a3b      	ldr	r3, [r7, #32]
 800172a:	2200      	movs	r2, #0
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 f880 	bl	8001834 <I2C_WaitOnFlagUntilTimeout>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e04d      	b.n	80017da <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001742:	b29b      	uxth	r3, r3
 8001744:	2bff      	cmp	r3, #255	; 0xff
 8001746:	d90e      	bls.n	8001766 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	22ff      	movs	r2, #255	; 0xff
 800174c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001752:	b2da      	uxtb	r2, r3
 8001754:	8979      	ldrh	r1, [r7, #10]
 8001756:	2300      	movs	r3, #0
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 f9f6 	bl	8001b50 <I2C_TransferConfig>
 8001764:	e00f      	b.n	8001786 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001774:	b2da      	uxtb	r2, r3
 8001776:	8979      	ldrh	r1, [r7, #10]
 8001778:	2300      	movs	r3, #0
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 f9e5 	bl	8001b50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178a:	b29b      	uxth	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d19d      	bne.n	80016cc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	6a39      	ldr	r1, [r7, #32]
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 f8cd 	bl	8001934 <I2C_WaitOnSTOPFlagUntilTimeout>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e01a      	b.n	80017da <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2220      	movs	r2, #32
 80017aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6859      	ldr	r1, [r3, #4]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_I2C_Master_Receive+0x1e8>)
 80017b8:	400b      	ands	r3, r1
 80017ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2220      	movs	r2, #32
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e000      	b.n	80017da <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80017d8:	2302      	movs	r3, #2
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	80002400 	.word	0x80002400
 80017e8:	fe00e800 	.word	0xfe00e800

080017ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d103      	bne.n	800180a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b01      	cmp	r3, #1
 8001816:	d007      	beq.n	8001828 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699a      	ldr	r2, [r3, #24]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0201 	orr.w	r2, r2, #1
 8001826:	619a      	str	r2, [r3, #24]
  }
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	4613      	mov	r3, r2
 8001842:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001844:	e022      	b.n	800188c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184c:	d01e      	beq.n	800188c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800184e:	f7ff fab3 	bl	8000db8 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d302      	bcc.n	8001864 <I2C_WaitOnFlagUntilTimeout+0x30>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d113      	bne.n	800188c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	f043 0220 	orr.w	r2, r3, #32
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2220      	movs	r2, #32
 8001874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e00f      	b.n	80018ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	4013      	ands	r3, r2
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	429a      	cmp	r2, r3
 800189a:	bf0c      	ite	eq
 800189c:	2301      	moveq	r3, #1
 800189e:	2300      	movne	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d0cd      	beq.n	8001846 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018c0:	e02c      	b.n	800191c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 f8dc 	bl	8001a84 <I2C_IsAcknowledgeFailed>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e02a      	b.n	800192c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d01e      	beq.n	800191c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018de:	f7ff fa6b 	bl	8000db8 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d302      	bcc.n	80018f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d113      	bne.n	800191c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	f043 0220 	orr.w	r2, r3, #32
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2220      	movs	r2, #32
 8001904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e007      	b.n	800192c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b02      	cmp	r3, #2
 8001928:	d1cb      	bne.n	80018c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001940:	e028      	b.n	8001994 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f89c 	bl	8001a84 <I2C_IsAcknowledgeFailed>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e026      	b.n	80019a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001956:	f7ff fa2f 	bl	8000db8 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	429a      	cmp	r2, r3
 8001964:	d302      	bcc.n	800196c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d113      	bne.n	8001994 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	f043 0220 	orr.w	r2, r3, #32
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2220      	movs	r2, #32
 800197c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e007      	b.n	80019a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	2b20      	cmp	r3, #32
 80019a0:	d1cf      	bne.n	8001942 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019b8:	e055      	b.n	8001a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 f860 	bl	8001a84 <I2C_IsAcknowledgeFailed>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e053      	b.n	8001a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0320 	and.w	r3, r3, #32
 80019d8:	2b20      	cmp	r3, #32
 80019da:	d129      	bne.n	8001a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d105      	bne.n	80019f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e03f      	b.n	8001a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2220      	movs	r2, #32
 80019fc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6859      	ldr	r1, [r3, #4]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001a0a:	400b      	ands	r3, r1
 8001a0c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e022      	b.n	8001a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a30:	f7ff f9c2 	bl	8000db8 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d302      	bcc.n	8001a46 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10f      	bne.n	8001a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f043 0220 	orr.w	r2, r3, #32
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2220      	movs	r2, #32
 8001a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e007      	b.n	8001a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d1a2      	bne.n	80019ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	fe00e800 	.word	0xfe00e800

08001a84 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b10      	cmp	r3, #16
 8001a9c:	d151      	bne.n	8001b42 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a9e:	e022      	b.n	8001ae6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa6:	d01e      	beq.n	8001ae6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa8:	f7ff f986 	bl	8000db8 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d302      	bcc.n	8001abe <I2C_IsAcknowledgeFailed+0x3a>
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d113      	bne.n	8001ae6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f043 0220 	orr.w	r2, r3, #32
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2220      	movs	r2, #32
 8001ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e02e      	b.n	8001b44 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0320 	and.w	r3, r3, #32
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	d1d5      	bne.n	8001aa0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2210      	movs	r2, #16
 8001afa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2220      	movs	r2, #32
 8001b02:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f7ff fe71 	bl	80017ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <I2C_IsAcknowledgeFailed+0xc8>)
 8001b16:	400b      	ands	r3, r1
 8001b18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f043 0204 	orr.w	r2, r3, #4
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	fe00e800 	.word	0xfe00e800

08001b50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	817b      	strh	r3, [r7, #10]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	0d5b      	lsrs	r3, r3, #21
 8001b6c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <I2C_TransferConfig+0x58>)
 8001b72:	430b      	orrs	r3, r1
 8001b74:	43db      	mvns	r3, r3
 8001b76:	ea02 0103 	and.w	r1, r2, r3
 8001b7a:	897b      	ldrh	r3, [r7, #10]
 8001b7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b80:	7a7b      	ldrb	r3, [r7, #9]
 8001b82:	041b      	lsls	r3, r3, #16
 8001b84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	03ff63ff 	.word	0x03ff63ff

08001bac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b20      	cmp	r3, #32
 8001bc0:	d138      	bne.n	8001c34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e032      	b.n	8001c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2224      	movs	r2, #36	; 0x24
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0201 	bic.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6819      	ldr	r1, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e000      	b.n	8001c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
  }
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b085      	sub	sp, #20
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d139      	bne.n	8001ccc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e033      	b.n	8001cce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2224      	movs	r2, #36	; 0x24
 8001c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0201 	bic.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e000      	b.n	8001cce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ccc:	2302      	movs	r3, #2
  }
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40007000 	.word	0x40007000

08001cfc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40007000 	.word	0x40007000

08001d18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d26:	d130      	bne.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d34:	d038      	beq.n	8001da8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d3e:	4a1e      	ldr	r2, [pc, #120]	; (8001db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d46:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2232      	movs	r2, #50	; 0x32
 8001d4c:	fb02 f303 	mul.w	r3, r2, r3
 8001d50:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	0c9b      	lsrs	r3, r3, #18
 8001d58:	3301      	adds	r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d5c:	e002      	b.n	8001d64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d70:	d102      	bne.n	8001d78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f2      	bne.n	8001d5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d84:	d110      	bne.n	8001da8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e00f      	b.n	8001daa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d96:	d007      	beq.n	8001da8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001da0:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40007000 	.word	0x40007000
 8001dbc:	20000004 	.word	0x20000004
 8001dc0:	431bde83 	.word	0x431bde83

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f000 bc56 	b.w	8002684 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd8:	4ba1      	ldr	r3, [pc, #644]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de2:	4b9f      	ldr	r3, [pc, #636]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80e6 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <HAL_RCC_OscConfig+0x4c>
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	f040 808d 	bne.w	8001f22 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	f040 8089 	bne.w	8001f22 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e10:	4b93      	ldr	r3, [pc, #588]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_RCC_OscConfig+0x66>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f000 bc2d 	b.w	8002684 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e2e:	4b8c      	ldr	r3, [pc, #560]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d004      	beq.n	8001e44 <HAL_RCC_OscConfig+0x80>
 8001e3a:	4b89      	ldr	r3, [pc, #548]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e42:	e005      	b.n	8001e50 <HAL_RCC_OscConfig+0x8c>
 8001e44:	4b86      	ldr	r3, [pc, #536]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d224      	bcs.n	8001e9e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fdbf 	bl	80029dc <RCC_SetFlashLatencyFromMSIRange>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f000 bc0d 	b.w	8002684 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e6a:	4b7d      	ldr	r3, [pc, #500]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a7c      	ldr	r2, [pc, #496]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001e70:	f043 0308 	orr.w	r3, r3, #8
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b7a      	ldr	r3, [pc, #488]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	4977      	ldr	r1, [pc, #476]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e88:	4b75      	ldr	r3, [pc, #468]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	4972      	ldr	r1, [pc, #456]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
 8001e9c:	e025      	b.n	8001eea <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e9e:	4b70      	ldr	r3, [pc, #448]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a6f      	ldr	r2, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b6d      	ldr	r3, [pc, #436]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	496a      	ldr	r1, [pc, #424]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ebc:	4b68      	ldr	r3, [pc, #416]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	4965      	ldr	r1, [pc, #404]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fd7e 	bl	80029dc <RCC_SetFlashLatencyFromMSIRange>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e3cc      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eea:	f000 fcb3 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	4b5b      	ldr	r3, [pc, #364]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	495a      	ldr	r1, [pc, #360]	; (8002064 <HAL_RCC_OscConfig+0x2a0>)
 8001efc:	5ccb      	ldrb	r3, [r1, r3]
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	fa22 f303 	lsr.w	r3, r2, r3
 8001f06:	4a58      	ldr	r2, [pc, #352]	; (8002068 <HAL_RCC_OscConfig+0x2a4>)
 8001f08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f0a:	4b58      	ldr	r3, [pc, #352]	; (800206c <HAL_RCC_OscConfig+0x2a8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe ff02 	bl	8000d18 <HAL_InitTick>
 8001f14:	4603      	mov	r3, r0
 8001f16:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d052      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	e3b0      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d032      	beq.n	8001f90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f2a:	4b4d      	ldr	r3, [pc, #308]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a4c      	ldr	r2, [pc, #304]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f36:	f7fe ff3f 	bl	8000db8 <HAL_GetTick>
 8001f3a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f3e:	f7fe ff3b 	bl	8000db8 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e399      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f50:	4b43      	ldr	r3, [pc, #268]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f5c:	4b40      	ldr	r3, [pc, #256]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a3f      	ldr	r2, [pc, #252]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001f62:	f043 0308 	orr.w	r3, r3, #8
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	493a      	ldr	r1, [pc, #232]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f7a:	4b39      	ldr	r3, [pc, #228]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	4935      	ldr	r1, [pc, #212]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
 8001f8e:	e01a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f90:	4b33      	ldr	r3, [pc, #204]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a32      	ldr	r2, [pc, #200]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f9c:	f7fe ff0c 	bl	8000db8 <HAL_GetTick>
 8001fa0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fa4:	f7fe ff08 	bl	8000db8 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e366      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x1e0>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d073      	beq.n	80020ba <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x220>
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d10e      	bne.n	8001ffc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d10b      	bne.n	8001ffc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d063      	beq.n	80020b8 <HAL_RCC_OscConfig+0x2f4>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d15f      	bne.n	80020b8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e343      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002004:	d106      	bne.n	8002014 <HAL_RCC_OscConfig+0x250>
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a15      	ldr	r2, [pc, #84]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e01d      	b.n	8002050 <HAL_RCC_OscConfig+0x28c>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x274>
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8002024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e00b      	b.n	8002050 <HAL_RCC_OscConfig+0x28c>
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a08      	ldr	r2, [pc, #32]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 800203e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a05      	ldr	r2, [pc, #20]	; (8002060 <HAL_RCC_OscConfig+0x29c>)
 800204a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01b      	beq.n	8002090 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe feae 	bl	8000db8 <HAL_GetTick>
 800205c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800205e:	e010      	b.n	8002082 <HAL_RCC_OscConfig+0x2be>
 8002060:	40021000 	.word	0x40021000
 8002064:	080047b4 	.word	0x080047b4
 8002068:	20000004 	.word	0x20000004
 800206c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002070:	f7fe fea2 	bl	8000db8 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	; 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e300      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002082:	4ba0      	ldr	r3, [pc, #640]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x2ac>
 800208e:	e014      	b.n	80020ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7fe fe92 	bl	8000db8 <HAL_GetTick>
 8002094:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002098:	f7fe fe8e 	bl	8000db8 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e2ec      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020aa:	4b96      	ldr	r3, [pc, #600]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x2d4>
 80020b6:	e000      	b.n	80020ba <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d060      	beq.n	8002188 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_OscConfig+0x314>
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d119      	bne.n	8002106 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d116      	bne.n	8002106 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d8:	4b8a      	ldr	r3, [pc, #552]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_OscConfig+0x32c>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e2c9      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f0:	4b84      	ldr	r3, [pc, #528]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	061b      	lsls	r3, r3, #24
 80020fe:	4981      	ldr	r1, [pc, #516]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002104:	e040      	b.n	8002188 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d023      	beq.n	8002156 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800210e:	4b7d      	ldr	r3, [pc, #500]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a7c      	ldr	r2, [pc, #496]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7fe fe4d 	bl	8000db8 <HAL_GetTick>
 800211e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002122:	f7fe fe49 	bl	8000db8 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e2a7      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002134:	4b73      	ldr	r3, [pc, #460]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b70      	ldr	r3, [pc, #448]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	496d      	ldr	r1, [pc, #436]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
 8002154:	e018      	b.n	8002188 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002156:	4b6b      	ldr	r3, [pc, #428]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a6a      	ldr	r2, [pc, #424]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 800215c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7fe fe29 	bl	8000db8 <HAL_GetTick>
 8002166:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216a:	f7fe fe25 	bl	8000db8 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e283      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800217c:	4b61      	ldr	r3, [pc, #388]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f0      	bne.n	800216a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d07f      	beq.n	8002294 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d05f      	beq.n	800225c <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800219c:	4b59      	ldr	r3, [pc, #356]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 800219e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a2:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d037      	beq.n	8002222 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e25c      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01b      	beq.n	800220c <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80021d4:	4b4b      	ldr	r3, [pc, #300]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 80021d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021da:	4a4a      	ldr	r2, [pc, #296]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021e4:	f7fe fde8 	bl	8000db8 <HAL_GetTick>
 80021e8:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ec:	f7fe fde4 	bl	8000db8 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b11      	cmp	r3, #17
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e242      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 8002200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ef      	bne.n	80021ec <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800220c:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 800220e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002212:	f023 0210 	bic.w	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	493a      	ldr	r1, [pc, #232]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002222:	4b38      	ldr	r3, [pc, #224]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 8002224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002228:	4a36      	ldr	r2, [pc, #216]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7fe fdc1 	bl	8000db8 <HAL_GetTick>
 8002236:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223a:	f7fe fdbd 	bl	8000db8 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b11      	cmp	r3, #17
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e21b      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800224c:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 800224e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0ef      	beq.n	800223a <HAL_RCC_OscConfig+0x476>
 800225a:	e01b      	b.n	8002294 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225c:	4b29      	ldr	r3, [pc, #164]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 800225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002262:	4a28      	ldr	r2, [pc, #160]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226c:	f7fe fda4 	bl	8000db8 <HAL_GetTick>
 8002270:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002274:	f7fe fda0 	bl	8000db8 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b11      	cmp	r3, #17
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1fe      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002286:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 8002288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1ef      	bne.n	8002274 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80c1 	beq.w	8002424 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10e      	bne.n	80022d2 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 80022ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022be:	6593      	str	r3, [r2, #88]	; 0x58
 80022c0:	4b10      	ldr	r3, [pc, #64]	; (8002304 <HAL_RCC_OscConfig+0x540>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <HAL_RCC_OscConfig+0x544>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d11c      	bne.n	8002318 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_RCC_OscConfig+0x544>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a09      	ldr	r2, [pc, #36]	; (8002308 <HAL_RCC_OscConfig+0x544>)
 80022e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ea:	f7fe fd65 	bl	8000db8 <HAL_GetTick>
 80022ee:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f0:	e00c      	b.n	800230c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f2:	f7fe fd61 	bl	8000db8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d905      	bls.n	800230c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e1bf      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
 8002304:	40021000 	.word	0x40021000
 8002308:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230c:	4bb1      	ldr	r3, [pc, #708]	; (80025d4 <HAL_RCC_OscConfig+0x810>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ec      	beq.n	80022f2 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d02c      	beq.n	800237e <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002324:	4bac      	ldr	r3, [pc, #688]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002336:	49a8      	ldr	r1, [pc, #672]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	d010      	beq.n	800236c <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800234a:	4ba3      	ldr	r3, [pc, #652]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 800234c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002350:	4aa1      	ldr	r2, [pc, #644]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800235a:	4b9f      	ldr	r3, [pc, #636]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 800235c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002360:	4a9d      	ldr	r2, [pc, #628]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800236a:	e018      	b.n	800239e <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800236c:	4b9a      	ldr	r3, [pc, #616]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	4a99      	ldr	r2, [pc, #612]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800237c:	e00f      	b.n	800239e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800237e:	4b96      	ldr	r3, [pc, #600]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002384:	4a94      	ldr	r2, [pc, #592]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800238e:	4b92      	ldr	r3, [pc, #584]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002394:	4a90      	ldr	r2, [pc, #576]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002396:	f023 0304 	bic.w	r3, r3, #4
 800239a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d016      	beq.n	80023d4 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7fe fd07 	bl	8000db8 <HAL_GetTick>
 80023aa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7fe fd03 	bl	8000db8 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e15f      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c4:	4b84      	ldr	r3, [pc, #528]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0ed      	beq.n	80023ae <HAL_RCC_OscConfig+0x5ea>
 80023d2:	e01d      	b.n	8002410 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7fe fcf0 	bl	8000db8 <HAL_GetTick>
 80023d8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023da:	e00a      	b.n	80023f2 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023dc:	f7fe fcec 	bl	8000db8 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e148      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023f2:	4b79      	ldr	r3, [pc, #484]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1ed      	bne.n	80023dc <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002400:	4b75      	ldr	r3, [pc, #468]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002406:	4a74      	ldr	r2, [pc, #464]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002418:	4b6f      	ldr	r3, [pc, #444]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 800241a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241c:	4a6e      	ldr	r2, [pc, #440]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 800241e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002422:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d03c      	beq.n	80024aa <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01c      	beq.n	8002472 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002438:	4b67      	ldr	r3, [pc, #412]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 800243a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800243e:	4a66      	ldr	r2, [pc, #408]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002448:	f7fe fcb6 	bl	8000db8 <HAL_GetTick>
 800244c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002450:	f7fe fcb2 	bl	8000db8 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e110      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002462:	4b5d      	ldr	r3, [pc, #372]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002464:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ef      	beq.n	8002450 <HAL_RCC_OscConfig+0x68c>
 8002470:	e01b      	b.n	80024aa <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002472:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002478:	4a57      	ldr	r2, [pc, #348]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7fe fc99 	bl	8000db8 <HAL_GetTick>
 8002486:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800248a:	f7fe fc95 	bl	8000db8 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e0f3      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800249c:	4b4e      	ldr	r3, [pc, #312]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 800249e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1ef      	bne.n	800248a <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 80e7 	beq.w	8002682 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	f040 80b7 	bne.w	800262c <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024be:	4b46      	ldr	r3, [pc, #280]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0203 	and.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d124      	bne.n	800251c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024dc:	3b01      	subs	r3, #1
 80024de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d11b      	bne.n	800251c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d113      	bne.n	800251c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	085b      	lsrs	r3, r3, #1
 8002500:	3b01      	subs	r3, #1
 8002502:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d109      	bne.n	800251c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	085b      	lsrs	r3, r3, #1
 8002514:	3b01      	subs	r3, #1
 8002516:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d061      	beq.n	80025e0 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d056      	beq.n	80025d0 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002522:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a2c      	ldr	r2, [pc, #176]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002528:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800252c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800252e:	f7fe fc43 	bl	8000db8 <HAL_GetTick>
 8002532:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe fc3f 	bl	8000db8 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e09d      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002548:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002554:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	4b20      	ldr	r3, [pc, #128]	; (80025dc <HAL_RCC_OscConfig+0x818>)
 800255a:	4013      	ands	r3, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002564:	3a01      	subs	r2, #1
 8002566:	0112      	lsls	r2, r2, #4
 8002568:	4311      	orrs	r1, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800256e:	0212      	lsls	r2, r2, #8
 8002570:	4311      	orrs	r1, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002576:	0852      	lsrs	r2, r2, #1
 8002578:	3a01      	subs	r2, #1
 800257a:	0552      	lsls	r2, r2, #21
 800257c:	4311      	orrs	r1, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002582:	0852      	lsrs	r2, r2, #1
 8002584:	3a01      	subs	r2, #1
 8002586:	0652      	lsls	r2, r2, #25
 8002588:	430a      	orrs	r2, r1
 800258a:	4913      	ldr	r1, [pc, #76]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 800258c:	4313      	orrs	r3, r2
 800258e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a10      	ldr	r2, [pc, #64]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 8002596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800259a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 80025a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a8:	f7fe fc06 	bl	8000db8 <HAL_GetTick>
 80025ac:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b0:	f7fe fc02 	bl	8000db8 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e060      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_RCC_OscConfig+0x814>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025ce:	e058      	b.n	8002682 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e057      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
 80025d4:	40007000 	.word	0x40007000
 80025d8:	40021000 	.word	0x40021000
 80025dc:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e0:	4b2a      	ldr	r3, [pc, #168]	; (800268c <HAL_RCC_OscConfig+0x8c8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d14a      	bne.n	8002682 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_OscConfig+0x8c8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a26      	ldr	r2, [pc, #152]	; (800268c <HAL_RCC_OscConfig+0x8c8>)
 80025f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025f8:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_OscConfig+0x8c8>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a23      	ldr	r2, [pc, #140]	; (800268c <HAL_RCC_OscConfig+0x8c8>)
 80025fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002602:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002604:	f7fe fbd8 	bl	8000db8 <HAL_GetTick>
 8002608:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260c:	f7fe fbd4 	bl	8000db8 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e032      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261e:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_RCC_OscConfig+0x8c8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x848>
 800262a:	e02a      	b.n	8002682 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	2b0c      	cmp	r3, #12
 8002630:	d025      	beq.n	800267e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002632:	4b16      	ldr	r3, [pc, #88]	; (800268c <HAL_RCC_OscConfig+0x8c8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a15      	ldr	r2, [pc, #84]	; (800268c <HAL_RCC_OscConfig+0x8c8>)
 8002638:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800263c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800263e:	4b13      	ldr	r3, [pc, #76]	; (800268c <HAL_RCC_OscConfig+0x8c8>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <HAL_RCC_OscConfig+0x8c8>)
 8002644:	f023 0303 	bic.w	r3, r3, #3
 8002648:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <HAL_RCC_OscConfig+0x8c8>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4a0f      	ldr	r2, [pc, #60]	; (800268c <HAL_RCC_OscConfig+0x8c8>)
 8002650:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002654:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7fe fbaf 	bl	8000db8 <HAL_GetTick>
 800265a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265e:	f7fe fbab 	bl	8000db8 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e009      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_OscConfig+0x8c8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f0      	bne.n	800265e <HAL_RCC_OscConfig+0x89a>
 800267c:	e001      	b.n	8002682 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3728      	adds	r7, #40	; 0x28
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0c8      	b.n	8002836 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a4:	4b66      	ldr	r3, [pc, #408]	; (8002840 <HAL_RCC_ClockConfig+0x1b0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d910      	bls.n	80026d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b63      	ldr	r3, [pc, #396]	; (8002840 <HAL_RCC_ClockConfig+0x1b0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 0207 	bic.w	r2, r3, #7
 80026ba:	4961      	ldr	r1, [pc, #388]	; (8002840 <HAL_RCC_ClockConfig+0x1b0>)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b5f      	ldr	r3, [pc, #380]	; (8002840 <HAL_RCC_ClockConfig+0x1b0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0b0      	b.n	8002836 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d04c      	beq.n	800277a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e8:	4b56      	ldr	r3, [pc, #344]	; (8002844 <HAL_RCC_ClockConfig+0x1b4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d121      	bne.n	8002738 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e09e      	b.n	8002836 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d107      	bne.n	8002710 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002700:	4b50      	ldr	r3, [pc, #320]	; (8002844 <HAL_RCC_ClockConfig+0x1b4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d115      	bne.n	8002738 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e092      	b.n	8002836 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002718:	4b4a      	ldr	r3, [pc, #296]	; (8002844 <HAL_RCC_ClockConfig+0x1b4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e086      	b.n	8002836 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002728:	4b46      	ldr	r3, [pc, #280]	; (8002844 <HAL_RCC_ClockConfig+0x1b4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e07e      	b.n	8002836 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002738:	4b42      	ldr	r3, [pc, #264]	; (8002844 <HAL_RCC_ClockConfig+0x1b4>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f023 0203 	bic.w	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	493f      	ldr	r1, [pc, #252]	; (8002844 <HAL_RCC_ClockConfig+0x1b4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274a:	f7fe fb35 	bl	8000db8 <HAL_GetTick>
 800274e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002750:	e00a      	b.n	8002768 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002752:	f7fe fb31 	bl	8000db8 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e066      	b.n	8002836 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002768:	4b36      	ldr	r3, [pc, #216]	; (8002844 <HAL_RCC_ClockConfig+0x1b4>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 020c 	and.w	r2, r3, #12
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	429a      	cmp	r2, r3
 8002778:	d1eb      	bne.n	8002752 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002786:	4b2f      	ldr	r3, [pc, #188]	; (8002844 <HAL_RCC_ClockConfig+0x1b4>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	492c      	ldr	r1, [pc, #176]	; (8002844 <HAL_RCC_ClockConfig+0x1b4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002798:	4b29      	ldr	r3, [pc, #164]	; (8002840 <HAL_RCC_ClockConfig+0x1b0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d210      	bcs.n	80027c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b26      	ldr	r3, [pc, #152]	; (8002840 <HAL_RCC_ClockConfig+0x1b0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 0207 	bic.w	r2, r3, #7
 80027ae:	4924      	ldr	r1, [pc, #144]	; (8002840 <HAL_RCC_ClockConfig+0x1b0>)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b22      	ldr	r3, [pc, #136]	; (8002840 <HAL_RCC_ClockConfig+0x1b0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e036      	b.n	8002836 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_RCC_ClockConfig+0x1b4>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4918      	ldr	r1, [pc, #96]	; (8002844 <HAL_RCC_ClockConfig+0x1b4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <HAL_RCC_ClockConfig+0x1b4>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4910      	ldr	r1, [pc, #64]	; (8002844 <HAL_RCC_ClockConfig+0x1b4>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002806:	f000 f825 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 800280a:	4602      	mov	r2, r0
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <HAL_RCC_ClockConfig+0x1b4>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	490c      	ldr	r1, [pc, #48]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	5ccb      	ldrb	r3, [r1, r3]
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	4a0a      	ldr	r2, [pc, #40]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002826:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe fa74 	bl	8000d18 <HAL_InitTick>
 8002830:	4603      	mov	r3, r0
 8002832:	72fb      	strb	r3, [r7, #11]

  return status;
 8002834:	7afb      	ldrb	r3, [r7, #11]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40022000 	.word	0x40022000
 8002844:	40021000 	.word	0x40021000
 8002848:	080047b4 	.word	0x080047b4
 800284c:	20000004 	.word	0x20000004
 8002850:	20000008 	.word	0x20000008

08002854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002854:	b480      	push	{r7}
 8002856:	b089      	sub	sp, #36	; 0x24
 8002858:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002862:	4b3e      	ldr	r3, [pc, #248]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800286c:	4b3b      	ldr	r3, [pc, #236]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x34>
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b0c      	cmp	r3, #12
 8002880:	d121      	bne.n	80028c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d11e      	bne.n	80028c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002888:	4b34      	ldr	r3, [pc, #208]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002894:	4b31      	ldr	r3, [pc, #196]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 8002896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	e005      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028a4:	4b2d      	ldr	r3, [pc, #180]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028b0:	4a2b      	ldr	r2, [pc, #172]	; (8002960 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10d      	bne.n	80028dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028c4:	e00a      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d102      	bne.n	80028d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028cc:	4b25      	ldr	r3, [pc, #148]	; (8002964 <HAL_RCC_GetSysClockFreq+0x110>)
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	e004      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028d8:	4b23      	ldr	r3, [pc, #140]	; (8002968 <HAL_RCC_GetSysClockFreq+0x114>)
 80028da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	d134      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d003      	beq.n	80028fa <HAL_RCC_GetSysClockFreq+0xa6>
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d003      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0xac>
 80028f8:	e005      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028fa:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <HAL_RCC_GetSysClockFreq+0x110>)
 80028fc:	617b      	str	r3, [r7, #20]
      break;
 80028fe:	e005      	b.n	800290c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_RCC_GetSysClockFreq+0x114>)
 8002902:	617b      	str	r3, [r7, #20]
      break;
 8002904:	e002      	b.n	800290c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	617b      	str	r3, [r7, #20]
      break;
 800290a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	3301      	adds	r3, #1
 8002918:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	fb02 f203 	mul.w	r2, r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	0e5b      	lsrs	r3, r3, #25
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	3301      	adds	r3, #1
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800294c:	69bb      	ldr	r3, [r7, #24]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3724      	adds	r7, #36	; 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000
 8002960:	080047cc 	.word	0x080047cc
 8002964:	00f42400 	.word	0x00f42400
 8002968:	007a1200 	.word	0x007a1200

0800296c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <HAL_RCC_GetHCLKFreq+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000004 	.word	0x20000004

08002984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002988:	f7ff fff0 	bl	800296c <HAL_RCC_GetHCLKFreq>
 800298c:	4602      	mov	r2, r0
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	4904      	ldr	r1, [pc, #16]	; (80029ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800299a:	5ccb      	ldrb	r3, [r1, r3]
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000
 80029ac:	080047c4 	.word	0x080047c4

080029b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029b4:	f7ff ffda 	bl	800296c <HAL_RCC_GetHCLKFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	0adb      	lsrs	r3, r3, #11
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	4904      	ldr	r1, [pc, #16]	; (80029d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	080047c4 	.word	0x080047c4

080029dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029e8:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029f4:	f7ff f982 	bl	8001cfc <HAL_PWREx_GetVoltageRange>
 80029f8:	6178      	str	r0, [r7, #20]
 80029fa:	e014      	b.n	8002a26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a00:	4a24      	ldr	r2, [pc, #144]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a06:	6593      	str	r3, [r2, #88]	; 0x58
 8002a08:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a14:	f7ff f972 	bl	8001cfc <HAL_PWREx_GetVoltageRange>
 8002a18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	4a1d      	ldr	r2, [pc, #116]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a2c:	d10b      	bne.n	8002a46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b80      	cmp	r3, #128	; 0x80
 8002a32:	d919      	bls.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2ba0      	cmp	r3, #160	; 0xa0
 8002a38:	d902      	bls.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	e013      	b.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a40:	2301      	movs	r3, #1
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	e010      	b.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b80      	cmp	r3, #128	; 0x80
 8002a4a:	d902      	bls.n	8002a52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	e00a      	b.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b80      	cmp	r3, #128	; 0x80
 8002a56:	d102      	bne.n	8002a5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a58:	2302      	movs	r3, #2
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	e004      	b.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b70      	cmp	r3, #112	; 0x70
 8002a62:	d101      	bne.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a64:	2301      	movs	r3, #1
 8002a66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 0207 	bic.w	r2, r3, #7
 8002a70:	4909      	ldr	r1, [pc, #36]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d001      	beq.n	8002a8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40022000 	.word	0x40022000

08002a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 809e 	beq.w	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aba:	2300      	movs	r3, #0
 8002abc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002abe:	4b46      	ldr	r3, [pc, #280]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00d      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad4:	4b40      	ldr	r3, [pc, #256]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	4a3f      	ldr	r2, [pc, #252]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ade:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae0:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aec:	2301      	movs	r3, #1
 8002aee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af0:	4b3a      	ldr	r3, [pc, #232]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a39      	ldr	r2, [pc, #228]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002afc:	f7fe f95c 	bl	8000db8 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b02:	e009      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b04:	f7fe f958 	bl	8000db8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d902      	bls.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	74fb      	strb	r3, [r7, #19]
        break;
 8002b16:	e005      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b18:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ef      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d15a      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b2a:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01e      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d019      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b50:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b52:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b68:	4a1b      	ldr	r2, [pc, #108]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b72:	4a19      	ldr	r2, [pc, #100]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d016      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe f918 	bl	8000db8 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8c:	f7fe f914 	bl	8000db8 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d902      	bls.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	74fb      	strb	r3, [r7, #19]
            break;
 8002ba2:	e006      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0ec      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002bb2:	7cfb      	ldrb	r3, [r7, #19]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb8:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4904      	ldr	r1, [pc, #16]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bce:	e009      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bd0:	7cfb      	ldrb	r3, [r7, #19]
 8002bd2:	74bb      	strb	r3, [r7, #18]
 8002bd4:	e006      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002be4:	7c7b      	ldrb	r3, [r7, #17]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d105      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bea:	4b6e      	ldr	r3, [pc, #440]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	4a6d      	ldr	r2, [pc, #436]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c02:	4b68      	ldr	r3, [pc, #416]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c08:	f023 0203 	bic.w	r2, r3, #3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4964      	ldr	r1, [pc, #400]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c24:	4b5f      	ldr	r3, [pc, #380]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	f023 020c 	bic.w	r2, r3, #12
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	495c      	ldr	r1, [pc, #368]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c46:	4b57      	ldr	r3, [pc, #348]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4953      	ldr	r1, [pc, #332]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c68:	4b4e      	ldr	r3, [pc, #312]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	494b      	ldr	r1, [pc, #300]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c8a:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	4942      	ldr	r1, [pc, #264]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cac:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	493a      	ldr	r1, [pc, #232]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cce:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	4931      	ldr	r1, [pc, #196]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cf0:	4b2c      	ldr	r3, [pc, #176]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	4929      	ldr	r1, [pc, #164]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d12:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	4920      	ldr	r1, [pc, #128]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d015      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	4918      	ldr	r1, [pc, #96]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d52:	d105      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d54:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d015      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d6c:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	490a      	ldr	r1, [pc, #40]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d8a:	d105      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d98:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000

08002da8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	6013      	str	r3, [r2, #0]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e040      	b.n	8002e5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fd fdfe 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2224      	movs	r2, #36	; 0x24
 8002df4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0201 	bic.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f992 	bl	8003130 <UART_SetConfig>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e022      	b.n	8002e5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fbba 	bl	8003598 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fc41 	bl	80036dc <UART_CheckIdleState>
 8002e5a:	4603      	mov	r3, r0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	f040 8082 	bne.w	8002f82 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_UART_Transmit+0x26>
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e07a      	b.n	8002f84 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_UART_Transmit+0x38>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e073      	b.n	8002f84 <HAL_UART_Transmit+0x120>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2221      	movs	r2, #33	; 0x21
 8002eb0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eb2:	f7fd ff81 	bl	8000db8 <HAL_GetTick>
 8002eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	88fa      	ldrh	r2, [r7, #6]
 8002ebc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	88fa      	ldrh	r2, [r7, #6]
 8002ec4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed0:	d108      	bne.n	8002ee4 <HAL_UART_Transmit+0x80>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	e003      	b.n	8002eec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002ef4:	e02d      	b.n	8002f52 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2200      	movs	r2, #0
 8002efe:	2180      	movs	r1, #128	; 0x80
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fc34 	bl	800376e <UART_WaitOnFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e039      	b.n	8002f84 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10b      	bne.n	8002f2e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	881a      	ldrh	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f22:	b292      	uxth	r2, r2
 8002f24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	3302      	adds	r3, #2
 8002f2a:	61bb      	str	r3, [r7, #24]
 8002f2c:	e008      	b.n	8002f40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b292      	uxth	r2, r2
 8002f38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1cb      	bne.n	8002ef6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2200      	movs	r2, #0
 8002f66:	2140      	movs	r1, #64	; 0x40
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 fc00 	bl	800376e <UART_WaitOnFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e005      	b.n	8002f84 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002f82:	2302      	movs	r3, #2
  }
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	; 0x28
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	f040 80bf 	bne.w	8003124 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_UART_Receive+0x26>
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e0b7      	b.n	8003126 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_UART_Receive+0x38>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e0b0      	b.n	8003126 <HAL_UART_Receive+0x19a>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2222      	movs	r2, #34	; 0x22
 8002fd8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fe0:	f7fd feea 	bl	8000db8 <HAL_GetTick>
 8002fe4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	88fa      	ldrh	r2, [r7, #6]
 8002fea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	88fa      	ldrh	r2, [r7, #6]
 8002ff2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffe:	d10e      	bne.n	800301e <HAL_UART_Receive+0x92>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <HAL_UART_Receive+0x88>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800300e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003012:	e02d      	b.n	8003070 <HAL_UART_Receive+0xe4>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	22ff      	movs	r2, #255	; 0xff
 8003018:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800301c:	e028      	b.n	8003070 <HAL_UART_Receive+0xe4>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10d      	bne.n	8003042 <HAL_UART_Receive+0xb6>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d104      	bne.n	8003038 <HAL_UART_Receive+0xac>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	22ff      	movs	r2, #255	; 0xff
 8003032:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003036:	e01b      	b.n	8003070 <HAL_UART_Receive+0xe4>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	227f      	movs	r2, #127	; 0x7f
 800303c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003040:	e016      	b.n	8003070 <HAL_UART_Receive+0xe4>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800304a:	d10d      	bne.n	8003068 <HAL_UART_Receive+0xdc>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d104      	bne.n	800305e <HAL_UART_Receive+0xd2>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	227f      	movs	r2, #127	; 0x7f
 8003058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800305c:	e008      	b.n	8003070 <HAL_UART_Receive+0xe4>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	223f      	movs	r2, #63	; 0x3f
 8003062:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003066:	e003      	b.n	8003070 <HAL_UART_Receive+0xe4>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003076:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003080:	d108      	bne.n	8003094 <HAL_UART_Receive+0x108>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	e003      	b.n	800309c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80030a4:	e033      	b.n	800310e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2200      	movs	r2, #0
 80030ae:	2120      	movs	r1, #32
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 fb5c 	bl	800376e <UART_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e032      	b.n	8003126 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10c      	bne.n	80030e0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	8a7b      	ldrh	r3, [r7, #18]
 80030d0:	4013      	ands	r3, r2
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	3302      	adds	r3, #2
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	e00d      	b.n	80030fc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	8a7b      	ldrh	r3, [r7, #18]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	4013      	ands	r3, r2
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1c5      	bne.n	80030a6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003130:	b5b0      	push	{r4, r5, r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	4313      	orrs	r3, r2
 8003152:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4baa      	ldr	r3, [pc, #680]	; (8003404 <UART_SetConfig+0x2d4>)
 800315c:	4013      	ands	r3, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	69f9      	ldr	r1, [r7, #28]
 8003164:	430b      	orrs	r3, r1
 8003166:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a9f      	ldr	r2, [pc, #636]	; (8003408 <UART_SetConfig+0x2d8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	4313      	orrs	r3, r2
 8003196:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a96      	ldr	r2, [pc, #600]	; (800340c <UART_SetConfig+0x2dc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d121      	bne.n	80031fa <UART_SetConfig+0xca>
 80031b6:	4b96      	ldr	r3, [pc, #600]	; (8003410 <UART_SetConfig+0x2e0>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d817      	bhi.n	80031f4 <UART_SetConfig+0xc4>
 80031c4:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <UART_SetConfig+0x9c>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	080031dd 	.word	0x080031dd
 80031d0:	080031e9 	.word	0x080031e9
 80031d4:	080031e3 	.word	0x080031e3
 80031d8:	080031ef 	.word	0x080031ef
 80031dc:	2301      	movs	r3, #1
 80031de:	76fb      	strb	r3, [r7, #27]
 80031e0:	e096      	b.n	8003310 <UART_SetConfig+0x1e0>
 80031e2:	2302      	movs	r3, #2
 80031e4:	76fb      	strb	r3, [r7, #27]
 80031e6:	e093      	b.n	8003310 <UART_SetConfig+0x1e0>
 80031e8:	2304      	movs	r3, #4
 80031ea:	76fb      	strb	r3, [r7, #27]
 80031ec:	e090      	b.n	8003310 <UART_SetConfig+0x1e0>
 80031ee:	2308      	movs	r3, #8
 80031f0:	76fb      	strb	r3, [r7, #27]
 80031f2:	e08d      	b.n	8003310 <UART_SetConfig+0x1e0>
 80031f4:	2310      	movs	r3, #16
 80031f6:	76fb      	strb	r3, [r7, #27]
 80031f8:	e08a      	b.n	8003310 <UART_SetConfig+0x1e0>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a85      	ldr	r2, [pc, #532]	; (8003414 <UART_SetConfig+0x2e4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d132      	bne.n	800326a <UART_SetConfig+0x13a>
 8003204:	4b82      	ldr	r3, [pc, #520]	; (8003410 <UART_SetConfig+0x2e0>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d828      	bhi.n	8003264 <UART_SetConfig+0x134>
 8003212:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <UART_SetConfig+0xe8>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	0800324d 	.word	0x0800324d
 800321c:	08003265 	.word	0x08003265
 8003220:	08003265 	.word	0x08003265
 8003224:	08003265 	.word	0x08003265
 8003228:	08003259 	.word	0x08003259
 800322c:	08003265 	.word	0x08003265
 8003230:	08003265 	.word	0x08003265
 8003234:	08003265 	.word	0x08003265
 8003238:	08003253 	.word	0x08003253
 800323c:	08003265 	.word	0x08003265
 8003240:	08003265 	.word	0x08003265
 8003244:	08003265 	.word	0x08003265
 8003248:	0800325f 	.word	0x0800325f
 800324c:	2300      	movs	r3, #0
 800324e:	76fb      	strb	r3, [r7, #27]
 8003250:	e05e      	b.n	8003310 <UART_SetConfig+0x1e0>
 8003252:	2302      	movs	r3, #2
 8003254:	76fb      	strb	r3, [r7, #27]
 8003256:	e05b      	b.n	8003310 <UART_SetConfig+0x1e0>
 8003258:	2304      	movs	r3, #4
 800325a:	76fb      	strb	r3, [r7, #27]
 800325c:	e058      	b.n	8003310 <UART_SetConfig+0x1e0>
 800325e:	2308      	movs	r3, #8
 8003260:	76fb      	strb	r3, [r7, #27]
 8003262:	e055      	b.n	8003310 <UART_SetConfig+0x1e0>
 8003264:	2310      	movs	r3, #16
 8003266:	76fb      	strb	r3, [r7, #27]
 8003268:	e052      	b.n	8003310 <UART_SetConfig+0x1e0>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6a      	ldr	r2, [pc, #424]	; (8003418 <UART_SetConfig+0x2e8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d120      	bne.n	80032b6 <UART_SetConfig+0x186>
 8003274:	4b66      	ldr	r3, [pc, #408]	; (8003410 <UART_SetConfig+0x2e0>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800327e:	2b30      	cmp	r3, #48	; 0x30
 8003280:	d013      	beq.n	80032aa <UART_SetConfig+0x17a>
 8003282:	2b30      	cmp	r3, #48	; 0x30
 8003284:	d814      	bhi.n	80032b0 <UART_SetConfig+0x180>
 8003286:	2b20      	cmp	r3, #32
 8003288:	d009      	beq.n	800329e <UART_SetConfig+0x16e>
 800328a:	2b20      	cmp	r3, #32
 800328c:	d810      	bhi.n	80032b0 <UART_SetConfig+0x180>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <UART_SetConfig+0x168>
 8003292:	2b10      	cmp	r3, #16
 8003294:	d006      	beq.n	80032a4 <UART_SetConfig+0x174>
 8003296:	e00b      	b.n	80032b0 <UART_SetConfig+0x180>
 8003298:	2300      	movs	r3, #0
 800329a:	76fb      	strb	r3, [r7, #27]
 800329c:	e038      	b.n	8003310 <UART_SetConfig+0x1e0>
 800329e:	2302      	movs	r3, #2
 80032a0:	76fb      	strb	r3, [r7, #27]
 80032a2:	e035      	b.n	8003310 <UART_SetConfig+0x1e0>
 80032a4:	2304      	movs	r3, #4
 80032a6:	76fb      	strb	r3, [r7, #27]
 80032a8:	e032      	b.n	8003310 <UART_SetConfig+0x1e0>
 80032aa:	2308      	movs	r3, #8
 80032ac:	76fb      	strb	r3, [r7, #27]
 80032ae:	e02f      	b.n	8003310 <UART_SetConfig+0x1e0>
 80032b0:	2310      	movs	r3, #16
 80032b2:	76fb      	strb	r3, [r7, #27]
 80032b4:	e02c      	b.n	8003310 <UART_SetConfig+0x1e0>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a53      	ldr	r2, [pc, #332]	; (8003408 <UART_SetConfig+0x2d8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d125      	bne.n	800330c <UART_SetConfig+0x1dc>
 80032c0:	4b53      	ldr	r3, [pc, #332]	; (8003410 <UART_SetConfig+0x2e0>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032ce:	d017      	beq.n	8003300 <UART_SetConfig+0x1d0>
 80032d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032d4:	d817      	bhi.n	8003306 <UART_SetConfig+0x1d6>
 80032d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032da:	d00b      	beq.n	80032f4 <UART_SetConfig+0x1c4>
 80032dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e0:	d811      	bhi.n	8003306 <UART_SetConfig+0x1d6>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <UART_SetConfig+0x1be>
 80032e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ea:	d006      	beq.n	80032fa <UART_SetConfig+0x1ca>
 80032ec:	e00b      	b.n	8003306 <UART_SetConfig+0x1d6>
 80032ee:	2300      	movs	r3, #0
 80032f0:	76fb      	strb	r3, [r7, #27]
 80032f2:	e00d      	b.n	8003310 <UART_SetConfig+0x1e0>
 80032f4:	2302      	movs	r3, #2
 80032f6:	76fb      	strb	r3, [r7, #27]
 80032f8:	e00a      	b.n	8003310 <UART_SetConfig+0x1e0>
 80032fa:	2304      	movs	r3, #4
 80032fc:	76fb      	strb	r3, [r7, #27]
 80032fe:	e007      	b.n	8003310 <UART_SetConfig+0x1e0>
 8003300:	2308      	movs	r3, #8
 8003302:	76fb      	strb	r3, [r7, #27]
 8003304:	e004      	b.n	8003310 <UART_SetConfig+0x1e0>
 8003306:	2310      	movs	r3, #16
 8003308:	76fb      	strb	r3, [r7, #27]
 800330a:	e001      	b.n	8003310 <UART_SetConfig+0x1e0>
 800330c:	2310      	movs	r3, #16
 800330e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a3c      	ldr	r2, [pc, #240]	; (8003408 <UART_SetConfig+0x2d8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	f040 8082 	bne.w	8003420 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800331c:	7efb      	ldrb	r3, [r7, #27]
 800331e:	2b08      	cmp	r3, #8
 8003320:	d823      	bhi.n	800336a <UART_SetConfig+0x23a>
 8003322:	a201      	add	r2, pc, #4	; (adr r2, 8003328 <UART_SetConfig+0x1f8>)
 8003324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003328:	0800334d 	.word	0x0800334d
 800332c:	0800336b 	.word	0x0800336b
 8003330:	08003355 	.word	0x08003355
 8003334:	0800336b 	.word	0x0800336b
 8003338:	0800335b 	.word	0x0800335b
 800333c:	0800336b 	.word	0x0800336b
 8003340:	0800336b 	.word	0x0800336b
 8003344:	0800336b 	.word	0x0800336b
 8003348:	08003363 	.word	0x08003363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800334c:	f7ff fb1a 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8003350:	6178      	str	r0, [r7, #20]
        break;
 8003352:	e00f      	b.n	8003374 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003354:	4b31      	ldr	r3, [pc, #196]	; (800341c <UART_SetConfig+0x2ec>)
 8003356:	617b      	str	r3, [r7, #20]
        break;
 8003358:	e00c      	b.n	8003374 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800335a:	f7ff fa7b 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 800335e:	6178      	str	r0, [r7, #20]
        break;
 8003360:	e008      	b.n	8003374 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003366:	617b      	str	r3, [r7, #20]
        break;
 8003368:	e004      	b.n	8003374 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	76bb      	strb	r3, [r7, #26]
        break;
 8003372:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8100 	beq.w	800357c <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	429a      	cmp	r2, r3
 800338a:	d305      	bcc.n	8003398 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	429a      	cmp	r2, r3
 8003396:	d902      	bls.n	800339e <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	76bb      	strb	r3, [r7, #26]
 800339c:	e0ee      	b.n	800357c <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f04f 0100 	mov.w	r1, #0
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	020b      	lsls	r3, r1, #8
 80033b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033b4:	0202      	lsls	r2, r0, #8
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	6849      	ldr	r1, [r1, #4]
 80033ba:	0849      	lsrs	r1, r1, #1
 80033bc:	4608      	mov	r0, r1
 80033be:	f04f 0100 	mov.w	r1, #0
 80033c2:	1814      	adds	r4, r2, r0
 80033c4:	eb43 0501 	adc.w	r5, r3, r1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	461a      	mov	r2, r3
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	4620      	mov	r0, r4
 80033d4:	4629      	mov	r1, r5
 80033d6:	f7fc ff4b 	bl	8000270 <__aeabi_uldivmod>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4613      	mov	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e8:	d308      	bcc.n	80033fc <UART_SetConfig+0x2cc>
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f0:	d204      	bcs.n	80033fc <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	e0bf      	b.n	800357c <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	76bb      	strb	r3, [r7, #26]
 8003400:	e0bc      	b.n	800357c <UART_SetConfig+0x44c>
 8003402:	bf00      	nop
 8003404:	efff69f3 	.word	0xefff69f3
 8003408:	40008000 	.word	0x40008000
 800340c:	40013800 	.word	0x40013800
 8003410:	40021000 	.word	0x40021000
 8003414:	40004400 	.word	0x40004400
 8003418:	40004800 	.word	0x40004800
 800341c:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003428:	d15c      	bne.n	80034e4 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 800342a:	7efb      	ldrb	r3, [r7, #27]
 800342c:	2b08      	cmp	r3, #8
 800342e:	d828      	bhi.n	8003482 <UART_SetConfig+0x352>
 8003430:	a201      	add	r2, pc, #4	; (adr r2, 8003438 <UART_SetConfig+0x308>)
 8003432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003436:	bf00      	nop
 8003438:	0800345d 	.word	0x0800345d
 800343c:	08003465 	.word	0x08003465
 8003440:	0800346d 	.word	0x0800346d
 8003444:	08003483 	.word	0x08003483
 8003448:	08003473 	.word	0x08003473
 800344c:	08003483 	.word	0x08003483
 8003450:	08003483 	.word	0x08003483
 8003454:	08003483 	.word	0x08003483
 8003458:	0800347b 	.word	0x0800347b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800345c:	f7ff fa92 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8003460:	6178      	str	r0, [r7, #20]
        break;
 8003462:	e013      	b.n	800348c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003464:	f7ff faa4 	bl	80029b0 <HAL_RCC_GetPCLK2Freq>
 8003468:	6178      	str	r0, [r7, #20]
        break;
 800346a:	e00f      	b.n	800348c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800346c:	4b49      	ldr	r3, [pc, #292]	; (8003594 <UART_SetConfig+0x464>)
 800346e:	617b      	str	r3, [r7, #20]
        break;
 8003470:	e00c      	b.n	800348c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003472:	f7ff f9ef 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 8003476:	6178      	str	r0, [r7, #20]
        break;
 8003478:	e008      	b.n	800348c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800347a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347e:	617b      	str	r3, [r7, #20]
        break;
 8003480:	e004      	b.n	800348c <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	76bb      	strb	r3, [r7, #26]
        break;
 800348a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d074      	beq.n	800357c <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	005a      	lsls	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	085b      	lsrs	r3, r3, #1
 800349c:	441a      	add	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b0f      	cmp	r3, #15
 80034ae:	d916      	bls.n	80034de <UART_SetConfig+0x3ae>
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b6:	d212      	bcs.n	80034de <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f023 030f 	bic.w	r3, r3, #15
 80034c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	89fb      	ldrh	r3, [r7, #14]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	89fa      	ldrh	r2, [r7, #14]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	e04e      	b.n	800357c <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	76bb      	strb	r3, [r7, #26]
 80034e2:	e04b      	b.n	800357c <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034e4:	7efb      	ldrb	r3, [r7, #27]
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d827      	bhi.n	800353a <UART_SetConfig+0x40a>
 80034ea:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <UART_SetConfig+0x3c0>)
 80034ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f0:	08003515 	.word	0x08003515
 80034f4:	0800351d 	.word	0x0800351d
 80034f8:	08003525 	.word	0x08003525
 80034fc:	0800353b 	.word	0x0800353b
 8003500:	0800352b 	.word	0x0800352b
 8003504:	0800353b 	.word	0x0800353b
 8003508:	0800353b 	.word	0x0800353b
 800350c:	0800353b 	.word	0x0800353b
 8003510:	08003533 	.word	0x08003533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003514:	f7ff fa36 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8003518:	6178      	str	r0, [r7, #20]
        break;
 800351a:	e013      	b.n	8003544 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800351c:	f7ff fa48 	bl	80029b0 <HAL_RCC_GetPCLK2Freq>
 8003520:	6178      	str	r0, [r7, #20]
        break;
 8003522:	e00f      	b.n	8003544 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003524:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <UART_SetConfig+0x464>)
 8003526:	617b      	str	r3, [r7, #20]
        break;
 8003528:	e00c      	b.n	8003544 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800352a:	f7ff f993 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 800352e:	6178      	str	r0, [r7, #20]
        break;
 8003530:	e008      	b.n	8003544 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003536:	617b      	str	r3, [r7, #20]
        break;
 8003538:	e004      	b.n	8003544 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	76bb      	strb	r3, [r7, #26]
        break;
 8003542:	bf00      	nop
    }

    if (pclk != 0U)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d018      	beq.n	800357c <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	085a      	lsrs	r2, r3, #1
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	441a      	add	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	b29b      	uxth	r3, r3
 800355e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	2b0f      	cmp	r3, #15
 8003564:	d908      	bls.n	8003578 <UART_SetConfig+0x448>
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356c:	d204      	bcs.n	8003578 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	e001      	b.n	800357c <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003588:	7ebb      	ldrb	r3, [r7, #26]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3720      	adds	r7, #32
 800358e:	46bd      	mov	sp, r7
 8003590:	bdb0      	pop	{r4, r5, r7, pc}
 8003592:	bf00      	nop
 8003594:	00f42400 	.word	0x00f42400

08003598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01a      	beq.n	80036ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003696:	d10a      	bne.n	80036ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	605a      	str	r2, [r3, #4]
  }
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036ec:	f7fd fb64 	bl	8000db8 <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d10e      	bne.n	800371e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f82d 	bl	800376e <UART_WaitOnFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e023      	b.n	8003766 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b04      	cmp	r3, #4
 800372a:	d10e      	bne.n	800374a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800372c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f817 	bl	800376e <UART_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e00d      	b.n	8003766 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2220      	movs	r2, #32
 800374e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	4613      	mov	r3, r2
 800377c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377e:	e05e      	b.n	800383e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003786:	d05a      	beq.n	800383e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003788:	f7fd fb16 	bl	8000db8 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	429a      	cmp	r2, r3
 8003796:	d302      	bcc.n	800379e <UART_WaitOnFlagUntilTimeout+0x30>
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d11b      	bne.n	80037d6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037ac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0201 	bic.w	r2, r2, #1
 80037bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e043      	b.n	800385e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d02c      	beq.n	800383e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f2:	d124      	bne.n	800383e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037fc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800380c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e00f      	b.n	800385e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69da      	ldr	r2, [r3, #28]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4013      	ands	r3, r2
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	429a      	cmp	r2, r3
 800384c:	bf0c      	ite	eq
 800384e:	2301      	moveq	r3, #1
 8003850:	2300      	movne	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	429a      	cmp	r2, r3
 800385a:	d091      	beq.n	8003780 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <__errno>:
 8003868:	4b01      	ldr	r3, [pc, #4]	; (8003870 <__errno+0x8>)
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000010 	.word	0x20000010

08003874 <__libc_init_array>:
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	4d0d      	ldr	r5, [pc, #52]	; (80038ac <__libc_init_array+0x38>)
 8003878:	4c0d      	ldr	r4, [pc, #52]	; (80038b0 <__libc_init_array+0x3c>)
 800387a:	1b64      	subs	r4, r4, r5
 800387c:	10a4      	asrs	r4, r4, #2
 800387e:	2600      	movs	r6, #0
 8003880:	42a6      	cmp	r6, r4
 8003882:	d109      	bne.n	8003898 <__libc_init_array+0x24>
 8003884:	4d0b      	ldr	r5, [pc, #44]	; (80038b4 <__libc_init_array+0x40>)
 8003886:	4c0c      	ldr	r4, [pc, #48]	; (80038b8 <__libc_init_array+0x44>)
 8003888:	f000 ff76 	bl	8004778 <_init>
 800388c:	1b64      	subs	r4, r4, r5
 800388e:	10a4      	asrs	r4, r4, #2
 8003890:	2600      	movs	r6, #0
 8003892:	42a6      	cmp	r6, r4
 8003894:	d105      	bne.n	80038a2 <__libc_init_array+0x2e>
 8003896:	bd70      	pop	{r4, r5, r6, pc}
 8003898:	f855 3b04 	ldr.w	r3, [r5], #4
 800389c:	4798      	blx	r3
 800389e:	3601      	adds	r6, #1
 80038a0:	e7ee      	b.n	8003880 <__libc_init_array+0xc>
 80038a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a6:	4798      	blx	r3
 80038a8:	3601      	adds	r6, #1
 80038aa:	e7f2      	b.n	8003892 <__libc_init_array+0x1e>
 80038ac:	0800489c 	.word	0x0800489c
 80038b0:	0800489c 	.word	0x0800489c
 80038b4:	0800489c 	.word	0x0800489c
 80038b8:	080048a0 	.word	0x080048a0

080038bc <memset>:
 80038bc:	4402      	add	r2, r0
 80038be:	4603      	mov	r3, r0
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d100      	bne.n	80038c6 <memset+0xa>
 80038c4:	4770      	bx	lr
 80038c6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ca:	e7f9      	b.n	80038c0 <memset+0x4>

080038cc <iprintf>:
 80038cc:	b40f      	push	{r0, r1, r2, r3}
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <iprintf+0x2c>)
 80038d0:	b513      	push	{r0, r1, r4, lr}
 80038d2:	681c      	ldr	r4, [r3, #0]
 80038d4:	b124      	cbz	r4, 80038e0 <iprintf+0x14>
 80038d6:	69a3      	ldr	r3, [r4, #24]
 80038d8:	b913      	cbnz	r3, 80038e0 <iprintf+0x14>
 80038da:	4620      	mov	r0, r4
 80038dc:	f000 f866 	bl	80039ac <__sinit>
 80038e0:	ab05      	add	r3, sp, #20
 80038e2:	9a04      	ldr	r2, [sp, #16]
 80038e4:	68a1      	ldr	r1, [r4, #8]
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	4620      	mov	r0, r4
 80038ea:	f000 f983 	bl	8003bf4 <_vfiprintf_r>
 80038ee:	b002      	add	sp, #8
 80038f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038f4:	b004      	add	sp, #16
 80038f6:	4770      	bx	lr
 80038f8:	20000010 	.word	0x20000010

080038fc <std>:
 80038fc:	2300      	movs	r3, #0
 80038fe:	b510      	push	{r4, lr}
 8003900:	4604      	mov	r4, r0
 8003902:	e9c0 3300 	strd	r3, r3, [r0]
 8003906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800390a:	6083      	str	r3, [r0, #8]
 800390c:	8181      	strh	r1, [r0, #12]
 800390e:	6643      	str	r3, [r0, #100]	; 0x64
 8003910:	81c2      	strh	r2, [r0, #14]
 8003912:	6183      	str	r3, [r0, #24]
 8003914:	4619      	mov	r1, r3
 8003916:	2208      	movs	r2, #8
 8003918:	305c      	adds	r0, #92	; 0x5c
 800391a:	f7ff ffcf 	bl	80038bc <memset>
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <std+0x38>)
 8003920:	6263      	str	r3, [r4, #36]	; 0x24
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <std+0x3c>)
 8003924:	62a3      	str	r3, [r4, #40]	; 0x28
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <std+0x40>)
 8003928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <std+0x44>)
 800392c:	6224      	str	r4, [r4, #32]
 800392e:	6323      	str	r3, [r4, #48]	; 0x30
 8003930:	bd10      	pop	{r4, pc}
 8003932:	bf00      	nop
 8003934:	0800419d 	.word	0x0800419d
 8003938:	080041bf 	.word	0x080041bf
 800393c:	080041f7 	.word	0x080041f7
 8003940:	0800421b 	.word	0x0800421b

08003944 <_cleanup_r>:
 8003944:	4901      	ldr	r1, [pc, #4]	; (800394c <_cleanup_r+0x8>)
 8003946:	f000 b8af 	b.w	8003aa8 <_fwalk_reent>
 800394a:	bf00      	nop
 800394c:	080044f5 	.word	0x080044f5

08003950 <__sfmoreglue>:
 8003950:	b570      	push	{r4, r5, r6, lr}
 8003952:	1e4a      	subs	r2, r1, #1
 8003954:	2568      	movs	r5, #104	; 0x68
 8003956:	4355      	muls	r5, r2
 8003958:	460e      	mov	r6, r1
 800395a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800395e:	f000 f8c5 	bl	8003aec <_malloc_r>
 8003962:	4604      	mov	r4, r0
 8003964:	b140      	cbz	r0, 8003978 <__sfmoreglue+0x28>
 8003966:	2100      	movs	r1, #0
 8003968:	e9c0 1600 	strd	r1, r6, [r0]
 800396c:	300c      	adds	r0, #12
 800396e:	60a0      	str	r0, [r4, #8]
 8003970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003974:	f7ff ffa2 	bl	80038bc <memset>
 8003978:	4620      	mov	r0, r4
 800397a:	bd70      	pop	{r4, r5, r6, pc}

0800397c <__sfp_lock_acquire>:
 800397c:	4801      	ldr	r0, [pc, #4]	; (8003984 <__sfp_lock_acquire+0x8>)
 800397e:	f000 b8b3 	b.w	8003ae8 <__retarget_lock_acquire_recursive>
 8003982:	bf00      	nop
 8003984:	2000017c 	.word	0x2000017c

08003988 <__sfp_lock_release>:
 8003988:	4801      	ldr	r0, [pc, #4]	; (8003990 <__sfp_lock_release+0x8>)
 800398a:	f000 b8ae 	b.w	8003aea <__retarget_lock_release_recursive>
 800398e:	bf00      	nop
 8003990:	2000017c 	.word	0x2000017c

08003994 <__sinit_lock_acquire>:
 8003994:	4801      	ldr	r0, [pc, #4]	; (800399c <__sinit_lock_acquire+0x8>)
 8003996:	f000 b8a7 	b.w	8003ae8 <__retarget_lock_acquire_recursive>
 800399a:	bf00      	nop
 800399c:	20000177 	.word	0x20000177

080039a0 <__sinit_lock_release>:
 80039a0:	4801      	ldr	r0, [pc, #4]	; (80039a8 <__sinit_lock_release+0x8>)
 80039a2:	f000 b8a2 	b.w	8003aea <__retarget_lock_release_recursive>
 80039a6:	bf00      	nop
 80039a8:	20000177 	.word	0x20000177

080039ac <__sinit>:
 80039ac:	b510      	push	{r4, lr}
 80039ae:	4604      	mov	r4, r0
 80039b0:	f7ff fff0 	bl	8003994 <__sinit_lock_acquire>
 80039b4:	69a3      	ldr	r3, [r4, #24]
 80039b6:	b11b      	cbz	r3, 80039c0 <__sinit+0x14>
 80039b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039bc:	f7ff bff0 	b.w	80039a0 <__sinit_lock_release>
 80039c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039c4:	6523      	str	r3, [r4, #80]	; 0x50
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <__sinit+0x68>)
 80039c8:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <__sinit+0x6c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80039ce:	42a3      	cmp	r3, r4
 80039d0:	bf04      	itt	eq
 80039d2:	2301      	moveq	r3, #1
 80039d4:	61a3      	streq	r3, [r4, #24]
 80039d6:	4620      	mov	r0, r4
 80039d8:	f000 f820 	bl	8003a1c <__sfp>
 80039dc:	6060      	str	r0, [r4, #4]
 80039de:	4620      	mov	r0, r4
 80039e0:	f000 f81c 	bl	8003a1c <__sfp>
 80039e4:	60a0      	str	r0, [r4, #8]
 80039e6:	4620      	mov	r0, r4
 80039e8:	f000 f818 	bl	8003a1c <__sfp>
 80039ec:	2200      	movs	r2, #0
 80039ee:	60e0      	str	r0, [r4, #12]
 80039f0:	2104      	movs	r1, #4
 80039f2:	6860      	ldr	r0, [r4, #4]
 80039f4:	f7ff ff82 	bl	80038fc <std>
 80039f8:	68a0      	ldr	r0, [r4, #8]
 80039fa:	2201      	movs	r2, #1
 80039fc:	2109      	movs	r1, #9
 80039fe:	f7ff ff7d 	bl	80038fc <std>
 8003a02:	68e0      	ldr	r0, [r4, #12]
 8003a04:	2202      	movs	r2, #2
 8003a06:	2112      	movs	r1, #18
 8003a08:	f7ff ff78 	bl	80038fc <std>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	61a3      	str	r3, [r4, #24]
 8003a10:	e7d2      	b.n	80039b8 <__sinit+0xc>
 8003a12:	bf00      	nop
 8003a14:	080047fc 	.word	0x080047fc
 8003a18:	08003945 	.word	0x08003945

08003a1c <__sfp>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	4607      	mov	r7, r0
 8003a20:	f7ff ffac 	bl	800397c <__sfp_lock_acquire>
 8003a24:	4b1e      	ldr	r3, [pc, #120]	; (8003aa0 <__sfp+0x84>)
 8003a26:	681e      	ldr	r6, [r3, #0]
 8003a28:	69b3      	ldr	r3, [r6, #24]
 8003a2a:	b913      	cbnz	r3, 8003a32 <__sfp+0x16>
 8003a2c:	4630      	mov	r0, r6
 8003a2e:	f7ff ffbd 	bl	80039ac <__sinit>
 8003a32:	3648      	adds	r6, #72	; 0x48
 8003a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	d503      	bpl.n	8003a44 <__sfp+0x28>
 8003a3c:	6833      	ldr	r3, [r6, #0]
 8003a3e:	b30b      	cbz	r3, 8003a84 <__sfp+0x68>
 8003a40:	6836      	ldr	r6, [r6, #0]
 8003a42:	e7f7      	b.n	8003a34 <__sfp+0x18>
 8003a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a48:	b9d5      	cbnz	r5, 8003a80 <__sfp+0x64>
 8003a4a:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <__sfp+0x88>)
 8003a4c:	60e3      	str	r3, [r4, #12]
 8003a4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a52:	6665      	str	r5, [r4, #100]	; 0x64
 8003a54:	f000 f847 	bl	8003ae6 <__retarget_lock_init_recursive>
 8003a58:	f7ff ff96 	bl	8003988 <__sfp_lock_release>
 8003a5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a64:	6025      	str	r5, [r4, #0]
 8003a66:	61a5      	str	r5, [r4, #24]
 8003a68:	2208      	movs	r2, #8
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a70:	f7ff ff24 	bl	80038bc <memset>
 8003a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a80:	3468      	adds	r4, #104	; 0x68
 8003a82:	e7d9      	b.n	8003a38 <__sfp+0x1c>
 8003a84:	2104      	movs	r1, #4
 8003a86:	4638      	mov	r0, r7
 8003a88:	f7ff ff62 	bl	8003950 <__sfmoreglue>
 8003a8c:	4604      	mov	r4, r0
 8003a8e:	6030      	str	r0, [r6, #0]
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d1d5      	bne.n	8003a40 <__sfp+0x24>
 8003a94:	f7ff ff78 	bl	8003988 <__sfp_lock_release>
 8003a98:	230c      	movs	r3, #12
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	e7ee      	b.n	8003a7c <__sfp+0x60>
 8003a9e:	bf00      	nop
 8003aa0:	080047fc 	.word	0x080047fc
 8003aa4:	ffff0001 	.word	0xffff0001

08003aa8 <_fwalk_reent>:
 8003aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aac:	4606      	mov	r6, r0
 8003aae:	4688      	mov	r8, r1
 8003ab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ab4:	2700      	movs	r7, #0
 8003ab6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003aba:	f1b9 0901 	subs.w	r9, r9, #1
 8003abe:	d505      	bpl.n	8003acc <_fwalk_reent+0x24>
 8003ac0:	6824      	ldr	r4, [r4, #0]
 8003ac2:	2c00      	cmp	r4, #0
 8003ac4:	d1f7      	bne.n	8003ab6 <_fwalk_reent+0xe>
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003acc:	89ab      	ldrh	r3, [r5, #12]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d907      	bls.n	8003ae2 <_fwalk_reent+0x3a>
 8003ad2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	d003      	beq.n	8003ae2 <_fwalk_reent+0x3a>
 8003ada:	4629      	mov	r1, r5
 8003adc:	4630      	mov	r0, r6
 8003ade:	47c0      	blx	r8
 8003ae0:	4307      	orrs	r7, r0
 8003ae2:	3568      	adds	r5, #104	; 0x68
 8003ae4:	e7e9      	b.n	8003aba <_fwalk_reent+0x12>

08003ae6 <__retarget_lock_init_recursive>:
 8003ae6:	4770      	bx	lr

08003ae8 <__retarget_lock_acquire_recursive>:
 8003ae8:	4770      	bx	lr

08003aea <__retarget_lock_release_recursive>:
 8003aea:	4770      	bx	lr

08003aec <_malloc_r>:
 8003aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aee:	1ccd      	adds	r5, r1, #3
 8003af0:	f025 0503 	bic.w	r5, r5, #3
 8003af4:	3508      	adds	r5, #8
 8003af6:	2d0c      	cmp	r5, #12
 8003af8:	bf38      	it	cc
 8003afa:	250c      	movcc	r5, #12
 8003afc:	2d00      	cmp	r5, #0
 8003afe:	4606      	mov	r6, r0
 8003b00:	db01      	blt.n	8003b06 <_malloc_r+0x1a>
 8003b02:	42a9      	cmp	r1, r5
 8003b04:	d903      	bls.n	8003b0e <_malloc_r+0x22>
 8003b06:	230c      	movs	r3, #12
 8003b08:	6033      	str	r3, [r6, #0]
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b0e:	f000 fda3 	bl	8004658 <__malloc_lock>
 8003b12:	4921      	ldr	r1, [pc, #132]	; (8003b98 <_malloc_r+0xac>)
 8003b14:	680a      	ldr	r2, [r1, #0]
 8003b16:	4614      	mov	r4, r2
 8003b18:	b99c      	cbnz	r4, 8003b42 <_malloc_r+0x56>
 8003b1a:	4f20      	ldr	r7, [pc, #128]	; (8003b9c <_malloc_r+0xb0>)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	b923      	cbnz	r3, 8003b2a <_malloc_r+0x3e>
 8003b20:	4621      	mov	r1, r4
 8003b22:	4630      	mov	r0, r6
 8003b24:	f000 fb2a 	bl	800417c <_sbrk_r>
 8003b28:	6038      	str	r0, [r7, #0]
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f000 fb25 	bl	800417c <_sbrk_r>
 8003b32:	1c43      	adds	r3, r0, #1
 8003b34:	d123      	bne.n	8003b7e <_malloc_r+0x92>
 8003b36:	230c      	movs	r3, #12
 8003b38:	6033      	str	r3, [r6, #0]
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	f000 fd92 	bl	8004664 <__malloc_unlock>
 8003b40:	e7e3      	b.n	8003b0a <_malloc_r+0x1e>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	1b5b      	subs	r3, r3, r5
 8003b46:	d417      	bmi.n	8003b78 <_malloc_r+0x8c>
 8003b48:	2b0b      	cmp	r3, #11
 8003b4a:	d903      	bls.n	8003b54 <_malloc_r+0x68>
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	441c      	add	r4, r3
 8003b50:	6025      	str	r5, [r4, #0]
 8003b52:	e004      	b.n	8003b5e <_malloc_r+0x72>
 8003b54:	6863      	ldr	r3, [r4, #4]
 8003b56:	42a2      	cmp	r2, r4
 8003b58:	bf0c      	ite	eq
 8003b5a:	600b      	streq	r3, [r1, #0]
 8003b5c:	6053      	strne	r3, [r2, #4]
 8003b5e:	4630      	mov	r0, r6
 8003b60:	f000 fd80 	bl	8004664 <__malloc_unlock>
 8003b64:	f104 000b 	add.w	r0, r4, #11
 8003b68:	1d23      	adds	r3, r4, #4
 8003b6a:	f020 0007 	bic.w	r0, r0, #7
 8003b6e:	1ac2      	subs	r2, r0, r3
 8003b70:	d0cc      	beq.n	8003b0c <_malloc_r+0x20>
 8003b72:	1a1b      	subs	r3, r3, r0
 8003b74:	50a3      	str	r3, [r4, r2]
 8003b76:	e7c9      	b.n	8003b0c <_malloc_r+0x20>
 8003b78:	4622      	mov	r2, r4
 8003b7a:	6864      	ldr	r4, [r4, #4]
 8003b7c:	e7cc      	b.n	8003b18 <_malloc_r+0x2c>
 8003b7e:	1cc4      	adds	r4, r0, #3
 8003b80:	f024 0403 	bic.w	r4, r4, #3
 8003b84:	42a0      	cmp	r0, r4
 8003b86:	d0e3      	beq.n	8003b50 <_malloc_r+0x64>
 8003b88:	1a21      	subs	r1, r4, r0
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f000 faf6 	bl	800417c <_sbrk_r>
 8003b90:	3001      	adds	r0, #1
 8003b92:	d1dd      	bne.n	8003b50 <_malloc_r+0x64>
 8003b94:	e7cf      	b.n	8003b36 <_malloc_r+0x4a>
 8003b96:	bf00      	nop
 8003b98:	20000098 	.word	0x20000098
 8003b9c:	2000009c 	.word	0x2000009c

08003ba0 <__sfputc_r>:
 8003ba0:	6893      	ldr	r3, [r2, #8]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	b410      	push	{r4}
 8003ba8:	6093      	str	r3, [r2, #8]
 8003baa:	da08      	bge.n	8003bbe <__sfputc_r+0x1e>
 8003bac:	6994      	ldr	r4, [r2, #24]
 8003bae:	42a3      	cmp	r3, r4
 8003bb0:	db01      	blt.n	8003bb6 <__sfputc_r+0x16>
 8003bb2:	290a      	cmp	r1, #10
 8003bb4:	d103      	bne.n	8003bbe <__sfputc_r+0x1e>
 8003bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bba:	f000 bb33 	b.w	8004224 <__swbuf_r>
 8003bbe:	6813      	ldr	r3, [r2, #0]
 8003bc0:	1c58      	adds	r0, r3, #1
 8003bc2:	6010      	str	r0, [r2, #0]
 8003bc4:	7019      	strb	r1, [r3, #0]
 8003bc6:	4608      	mov	r0, r1
 8003bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <__sfputs_r>:
 8003bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	460f      	mov	r7, r1
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	18d5      	adds	r5, r2, r3
 8003bd8:	42ac      	cmp	r4, r5
 8003bda:	d101      	bne.n	8003be0 <__sfputs_r+0x12>
 8003bdc:	2000      	movs	r0, #0
 8003bde:	e007      	b.n	8003bf0 <__sfputs_r+0x22>
 8003be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003be4:	463a      	mov	r2, r7
 8003be6:	4630      	mov	r0, r6
 8003be8:	f7ff ffda 	bl	8003ba0 <__sfputc_r>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d1f3      	bne.n	8003bd8 <__sfputs_r+0xa>
 8003bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bf4 <_vfiprintf_r>:
 8003bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf8:	460d      	mov	r5, r1
 8003bfa:	b09d      	sub	sp, #116	; 0x74
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	4698      	mov	r8, r3
 8003c00:	4606      	mov	r6, r0
 8003c02:	b118      	cbz	r0, 8003c0c <_vfiprintf_r+0x18>
 8003c04:	6983      	ldr	r3, [r0, #24]
 8003c06:	b90b      	cbnz	r3, 8003c0c <_vfiprintf_r+0x18>
 8003c08:	f7ff fed0 	bl	80039ac <__sinit>
 8003c0c:	4b89      	ldr	r3, [pc, #548]	; (8003e34 <_vfiprintf_r+0x240>)
 8003c0e:	429d      	cmp	r5, r3
 8003c10:	d11b      	bne.n	8003c4a <_vfiprintf_r+0x56>
 8003c12:	6875      	ldr	r5, [r6, #4]
 8003c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c16:	07d9      	lsls	r1, r3, #31
 8003c18:	d405      	bmi.n	8003c26 <_vfiprintf_r+0x32>
 8003c1a:	89ab      	ldrh	r3, [r5, #12]
 8003c1c:	059a      	lsls	r2, r3, #22
 8003c1e:	d402      	bmi.n	8003c26 <_vfiprintf_r+0x32>
 8003c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c22:	f7ff ff61 	bl	8003ae8 <__retarget_lock_acquire_recursive>
 8003c26:	89ab      	ldrh	r3, [r5, #12]
 8003c28:	071b      	lsls	r3, r3, #28
 8003c2a:	d501      	bpl.n	8003c30 <_vfiprintf_r+0x3c>
 8003c2c:	692b      	ldr	r3, [r5, #16]
 8003c2e:	b9eb      	cbnz	r3, 8003c6c <_vfiprintf_r+0x78>
 8003c30:	4629      	mov	r1, r5
 8003c32:	4630      	mov	r0, r6
 8003c34:	f000 fb5a 	bl	80042ec <__swsetup_r>
 8003c38:	b1c0      	cbz	r0, 8003c6c <_vfiprintf_r+0x78>
 8003c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c3c:	07dc      	lsls	r4, r3, #31
 8003c3e:	d50e      	bpl.n	8003c5e <_vfiprintf_r+0x6a>
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	b01d      	add	sp, #116	; 0x74
 8003c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c4a:	4b7b      	ldr	r3, [pc, #492]	; (8003e38 <_vfiprintf_r+0x244>)
 8003c4c:	429d      	cmp	r5, r3
 8003c4e:	d101      	bne.n	8003c54 <_vfiprintf_r+0x60>
 8003c50:	68b5      	ldr	r5, [r6, #8]
 8003c52:	e7df      	b.n	8003c14 <_vfiprintf_r+0x20>
 8003c54:	4b79      	ldr	r3, [pc, #484]	; (8003e3c <_vfiprintf_r+0x248>)
 8003c56:	429d      	cmp	r5, r3
 8003c58:	bf08      	it	eq
 8003c5a:	68f5      	ldreq	r5, [r6, #12]
 8003c5c:	e7da      	b.n	8003c14 <_vfiprintf_r+0x20>
 8003c5e:	89ab      	ldrh	r3, [r5, #12]
 8003c60:	0598      	lsls	r0, r3, #22
 8003c62:	d4ed      	bmi.n	8003c40 <_vfiprintf_r+0x4c>
 8003c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c66:	f7ff ff40 	bl	8003aea <__retarget_lock_release_recursive>
 8003c6a:	e7e9      	b.n	8003c40 <_vfiprintf_r+0x4c>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c70:	2320      	movs	r3, #32
 8003c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c7a:	2330      	movs	r3, #48	; 0x30
 8003c7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003e40 <_vfiprintf_r+0x24c>
 8003c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c84:	f04f 0901 	mov.w	r9, #1
 8003c88:	4623      	mov	r3, r4
 8003c8a:	469a      	mov	sl, r3
 8003c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c90:	b10a      	cbz	r2, 8003c96 <_vfiprintf_r+0xa2>
 8003c92:	2a25      	cmp	r2, #37	; 0x25
 8003c94:	d1f9      	bne.n	8003c8a <_vfiprintf_r+0x96>
 8003c96:	ebba 0b04 	subs.w	fp, sl, r4
 8003c9a:	d00b      	beq.n	8003cb4 <_vfiprintf_r+0xc0>
 8003c9c:	465b      	mov	r3, fp
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	f7ff ff93 	bl	8003bce <__sfputs_r>
 8003ca8:	3001      	adds	r0, #1
 8003caa:	f000 80aa 	beq.w	8003e02 <_vfiprintf_r+0x20e>
 8003cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cb0:	445a      	add	r2, fp
 8003cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8003cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80a2 	beq.w	8003e02 <_vfiprintf_r+0x20e>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cc8:	f10a 0a01 	add.w	sl, sl, #1
 8003ccc:	9304      	str	r3, [sp, #16]
 8003cce:	9307      	str	r3, [sp, #28]
 8003cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8003cd6:	4654      	mov	r4, sl
 8003cd8:	2205      	movs	r2, #5
 8003cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cde:	4858      	ldr	r0, [pc, #352]	; (8003e40 <_vfiprintf_r+0x24c>)
 8003ce0:	f7fc fa76 	bl	80001d0 <memchr>
 8003ce4:	9a04      	ldr	r2, [sp, #16]
 8003ce6:	b9d8      	cbnz	r0, 8003d20 <_vfiprintf_r+0x12c>
 8003ce8:	06d1      	lsls	r1, r2, #27
 8003cea:	bf44      	itt	mi
 8003cec:	2320      	movmi	r3, #32
 8003cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cf2:	0713      	lsls	r3, r2, #28
 8003cf4:	bf44      	itt	mi
 8003cf6:	232b      	movmi	r3, #43	; 0x2b
 8003cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8003d00:	2b2a      	cmp	r3, #42	; 0x2a
 8003d02:	d015      	beq.n	8003d30 <_vfiprintf_r+0x13c>
 8003d04:	9a07      	ldr	r2, [sp, #28]
 8003d06:	4654      	mov	r4, sl
 8003d08:	2000      	movs	r0, #0
 8003d0a:	f04f 0c0a 	mov.w	ip, #10
 8003d0e:	4621      	mov	r1, r4
 8003d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d14:	3b30      	subs	r3, #48	; 0x30
 8003d16:	2b09      	cmp	r3, #9
 8003d18:	d94e      	bls.n	8003db8 <_vfiprintf_r+0x1c4>
 8003d1a:	b1b0      	cbz	r0, 8003d4a <_vfiprintf_r+0x156>
 8003d1c:	9207      	str	r2, [sp, #28]
 8003d1e:	e014      	b.n	8003d4a <_vfiprintf_r+0x156>
 8003d20:	eba0 0308 	sub.w	r3, r0, r8
 8003d24:	fa09 f303 	lsl.w	r3, r9, r3
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	9304      	str	r3, [sp, #16]
 8003d2c:	46a2      	mov	sl, r4
 8003d2e:	e7d2      	b.n	8003cd6 <_vfiprintf_r+0xe2>
 8003d30:	9b03      	ldr	r3, [sp, #12]
 8003d32:	1d19      	adds	r1, r3, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	9103      	str	r1, [sp, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bfbb      	ittet	lt
 8003d3c:	425b      	neglt	r3, r3
 8003d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8003d42:	9307      	strge	r3, [sp, #28]
 8003d44:	9307      	strlt	r3, [sp, #28]
 8003d46:	bfb8      	it	lt
 8003d48:	9204      	strlt	r2, [sp, #16]
 8003d4a:	7823      	ldrb	r3, [r4, #0]
 8003d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8003d4e:	d10c      	bne.n	8003d6a <_vfiprintf_r+0x176>
 8003d50:	7863      	ldrb	r3, [r4, #1]
 8003d52:	2b2a      	cmp	r3, #42	; 0x2a
 8003d54:	d135      	bne.n	8003dc2 <_vfiprintf_r+0x1ce>
 8003d56:	9b03      	ldr	r3, [sp, #12]
 8003d58:	1d1a      	adds	r2, r3, #4
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	9203      	str	r2, [sp, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bfb8      	it	lt
 8003d62:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d66:	3402      	adds	r4, #2
 8003d68:	9305      	str	r3, [sp, #20]
 8003d6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003e50 <_vfiprintf_r+0x25c>
 8003d6e:	7821      	ldrb	r1, [r4, #0]
 8003d70:	2203      	movs	r2, #3
 8003d72:	4650      	mov	r0, sl
 8003d74:	f7fc fa2c 	bl	80001d0 <memchr>
 8003d78:	b140      	cbz	r0, 8003d8c <_vfiprintf_r+0x198>
 8003d7a:	2340      	movs	r3, #64	; 0x40
 8003d7c:	eba0 000a 	sub.w	r0, r0, sl
 8003d80:	fa03 f000 	lsl.w	r0, r3, r0
 8003d84:	9b04      	ldr	r3, [sp, #16]
 8003d86:	4303      	orrs	r3, r0
 8003d88:	3401      	adds	r4, #1
 8003d8a:	9304      	str	r3, [sp, #16]
 8003d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d90:	482c      	ldr	r0, [pc, #176]	; (8003e44 <_vfiprintf_r+0x250>)
 8003d92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d96:	2206      	movs	r2, #6
 8003d98:	f7fc fa1a 	bl	80001d0 <memchr>
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	d03f      	beq.n	8003e20 <_vfiprintf_r+0x22c>
 8003da0:	4b29      	ldr	r3, [pc, #164]	; (8003e48 <_vfiprintf_r+0x254>)
 8003da2:	bb1b      	cbnz	r3, 8003dec <_vfiprintf_r+0x1f8>
 8003da4:	9b03      	ldr	r3, [sp, #12]
 8003da6:	3307      	adds	r3, #7
 8003da8:	f023 0307 	bic.w	r3, r3, #7
 8003dac:	3308      	adds	r3, #8
 8003dae:	9303      	str	r3, [sp, #12]
 8003db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003db2:	443b      	add	r3, r7
 8003db4:	9309      	str	r3, [sp, #36]	; 0x24
 8003db6:	e767      	b.n	8003c88 <_vfiprintf_r+0x94>
 8003db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	2001      	movs	r0, #1
 8003dc0:	e7a5      	b.n	8003d0e <_vfiprintf_r+0x11a>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	3401      	adds	r4, #1
 8003dc6:	9305      	str	r3, [sp, #20]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f04f 0c0a 	mov.w	ip, #10
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dd4:	3a30      	subs	r2, #48	; 0x30
 8003dd6:	2a09      	cmp	r2, #9
 8003dd8:	d903      	bls.n	8003de2 <_vfiprintf_r+0x1ee>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0c5      	beq.n	8003d6a <_vfiprintf_r+0x176>
 8003dde:	9105      	str	r1, [sp, #20]
 8003de0:	e7c3      	b.n	8003d6a <_vfiprintf_r+0x176>
 8003de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003de6:	4604      	mov	r4, r0
 8003de8:	2301      	movs	r3, #1
 8003dea:	e7f0      	b.n	8003dce <_vfiprintf_r+0x1da>
 8003dec:	ab03      	add	r3, sp, #12
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	462a      	mov	r2, r5
 8003df2:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <_vfiprintf_r+0x258>)
 8003df4:	a904      	add	r1, sp, #16
 8003df6:	4630      	mov	r0, r6
 8003df8:	f3af 8000 	nop.w
 8003dfc:	4607      	mov	r7, r0
 8003dfe:	1c78      	adds	r0, r7, #1
 8003e00:	d1d6      	bne.n	8003db0 <_vfiprintf_r+0x1bc>
 8003e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e04:	07d9      	lsls	r1, r3, #31
 8003e06:	d405      	bmi.n	8003e14 <_vfiprintf_r+0x220>
 8003e08:	89ab      	ldrh	r3, [r5, #12]
 8003e0a:	059a      	lsls	r2, r3, #22
 8003e0c:	d402      	bmi.n	8003e14 <_vfiprintf_r+0x220>
 8003e0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e10:	f7ff fe6b 	bl	8003aea <__retarget_lock_release_recursive>
 8003e14:	89ab      	ldrh	r3, [r5, #12]
 8003e16:	065b      	lsls	r3, r3, #25
 8003e18:	f53f af12 	bmi.w	8003c40 <_vfiprintf_r+0x4c>
 8003e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e1e:	e711      	b.n	8003c44 <_vfiprintf_r+0x50>
 8003e20:	ab03      	add	r3, sp, #12
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	462a      	mov	r2, r5
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <_vfiprintf_r+0x258>)
 8003e28:	a904      	add	r1, sp, #16
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	f000 f880 	bl	8003f30 <_printf_i>
 8003e30:	e7e4      	b.n	8003dfc <_vfiprintf_r+0x208>
 8003e32:	bf00      	nop
 8003e34:	08004820 	.word	0x08004820
 8003e38:	08004840 	.word	0x08004840
 8003e3c:	08004800 	.word	0x08004800
 8003e40:	08004860 	.word	0x08004860
 8003e44:	0800486a 	.word	0x0800486a
 8003e48:	00000000 	.word	0x00000000
 8003e4c:	08003bcf 	.word	0x08003bcf
 8003e50:	08004866 	.word	0x08004866

08003e54 <_printf_common>:
 8003e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e58:	4616      	mov	r6, r2
 8003e5a:	4699      	mov	r9, r3
 8003e5c:	688a      	ldr	r2, [r1, #8]
 8003e5e:	690b      	ldr	r3, [r1, #16]
 8003e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e64:	4293      	cmp	r3, r2
 8003e66:	bfb8      	it	lt
 8003e68:	4613      	movlt	r3, r2
 8003e6a:	6033      	str	r3, [r6, #0]
 8003e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e70:	4607      	mov	r7, r0
 8003e72:	460c      	mov	r4, r1
 8003e74:	b10a      	cbz	r2, 8003e7a <_printf_common+0x26>
 8003e76:	3301      	adds	r3, #1
 8003e78:	6033      	str	r3, [r6, #0]
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	0699      	lsls	r1, r3, #26
 8003e7e:	bf42      	ittt	mi
 8003e80:	6833      	ldrmi	r3, [r6, #0]
 8003e82:	3302      	addmi	r3, #2
 8003e84:	6033      	strmi	r3, [r6, #0]
 8003e86:	6825      	ldr	r5, [r4, #0]
 8003e88:	f015 0506 	ands.w	r5, r5, #6
 8003e8c:	d106      	bne.n	8003e9c <_printf_common+0x48>
 8003e8e:	f104 0a19 	add.w	sl, r4, #25
 8003e92:	68e3      	ldr	r3, [r4, #12]
 8003e94:	6832      	ldr	r2, [r6, #0]
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	42ab      	cmp	r3, r5
 8003e9a:	dc26      	bgt.n	8003eea <_printf_common+0x96>
 8003e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ea0:	1e13      	subs	r3, r2, #0
 8003ea2:	6822      	ldr	r2, [r4, #0]
 8003ea4:	bf18      	it	ne
 8003ea6:	2301      	movne	r3, #1
 8003ea8:	0692      	lsls	r2, r2, #26
 8003eaa:	d42b      	bmi.n	8003f04 <_printf_common+0xb0>
 8003eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eb0:	4649      	mov	r1, r9
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	47c0      	blx	r8
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	d01e      	beq.n	8003ef8 <_printf_common+0xa4>
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	68e5      	ldr	r5, [r4, #12]
 8003ebe:	6832      	ldr	r2, [r6, #0]
 8003ec0:	f003 0306 	and.w	r3, r3, #6
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	bf08      	it	eq
 8003ec8:	1aad      	subeq	r5, r5, r2
 8003eca:	68a3      	ldr	r3, [r4, #8]
 8003ecc:	6922      	ldr	r2, [r4, #16]
 8003ece:	bf0c      	ite	eq
 8003ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ed4:	2500      	movne	r5, #0
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	bfc4      	itt	gt
 8003eda:	1a9b      	subgt	r3, r3, r2
 8003edc:	18ed      	addgt	r5, r5, r3
 8003ede:	2600      	movs	r6, #0
 8003ee0:	341a      	adds	r4, #26
 8003ee2:	42b5      	cmp	r5, r6
 8003ee4:	d11a      	bne.n	8003f1c <_printf_common+0xc8>
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	e008      	b.n	8003efc <_printf_common+0xa8>
 8003eea:	2301      	movs	r3, #1
 8003eec:	4652      	mov	r2, sl
 8003eee:	4649      	mov	r1, r9
 8003ef0:	4638      	mov	r0, r7
 8003ef2:	47c0      	blx	r8
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	d103      	bne.n	8003f00 <_printf_common+0xac>
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f00:	3501      	adds	r5, #1
 8003f02:	e7c6      	b.n	8003e92 <_printf_common+0x3e>
 8003f04:	18e1      	adds	r1, r4, r3
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	2030      	movs	r0, #48	; 0x30
 8003f0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f0e:	4422      	add	r2, r4
 8003f10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f18:	3302      	adds	r3, #2
 8003f1a:	e7c7      	b.n	8003eac <_printf_common+0x58>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	4622      	mov	r2, r4
 8003f20:	4649      	mov	r1, r9
 8003f22:	4638      	mov	r0, r7
 8003f24:	47c0      	blx	r8
 8003f26:	3001      	adds	r0, #1
 8003f28:	d0e6      	beq.n	8003ef8 <_printf_common+0xa4>
 8003f2a:	3601      	adds	r6, #1
 8003f2c:	e7d9      	b.n	8003ee2 <_printf_common+0x8e>
	...

08003f30 <_printf_i>:
 8003f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f34:	460c      	mov	r4, r1
 8003f36:	4691      	mov	r9, r2
 8003f38:	7e27      	ldrb	r7, [r4, #24]
 8003f3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f3c:	2f78      	cmp	r7, #120	; 0x78
 8003f3e:	4680      	mov	r8, r0
 8003f40:	469a      	mov	sl, r3
 8003f42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f46:	d807      	bhi.n	8003f58 <_printf_i+0x28>
 8003f48:	2f62      	cmp	r7, #98	; 0x62
 8003f4a:	d80a      	bhi.n	8003f62 <_printf_i+0x32>
 8003f4c:	2f00      	cmp	r7, #0
 8003f4e:	f000 80d8 	beq.w	8004102 <_printf_i+0x1d2>
 8003f52:	2f58      	cmp	r7, #88	; 0x58
 8003f54:	f000 80a3 	beq.w	800409e <_printf_i+0x16e>
 8003f58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f60:	e03a      	b.n	8003fd8 <_printf_i+0xa8>
 8003f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f66:	2b15      	cmp	r3, #21
 8003f68:	d8f6      	bhi.n	8003f58 <_printf_i+0x28>
 8003f6a:	a001      	add	r0, pc, #4	; (adr r0, 8003f70 <_printf_i+0x40>)
 8003f6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f70:	08003fc9 	.word	0x08003fc9
 8003f74:	08003fdd 	.word	0x08003fdd
 8003f78:	08003f59 	.word	0x08003f59
 8003f7c:	08003f59 	.word	0x08003f59
 8003f80:	08003f59 	.word	0x08003f59
 8003f84:	08003f59 	.word	0x08003f59
 8003f88:	08003fdd 	.word	0x08003fdd
 8003f8c:	08003f59 	.word	0x08003f59
 8003f90:	08003f59 	.word	0x08003f59
 8003f94:	08003f59 	.word	0x08003f59
 8003f98:	08003f59 	.word	0x08003f59
 8003f9c:	080040e9 	.word	0x080040e9
 8003fa0:	0800400d 	.word	0x0800400d
 8003fa4:	080040cb 	.word	0x080040cb
 8003fa8:	08003f59 	.word	0x08003f59
 8003fac:	08003f59 	.word	0x08003f59
 8003fb0:	0800410b 	.word	0x0800410b
 8003fb4:	08003f59 	.word	0x08003f59
 8003fb8:	0800400d 	.word	0x0800400d
 8003fbc:	08003f59 	.word	0x08003f59
 8003fc0:	08003f59 	.word	0x08003f59
 8003fc4:	080040d3 	.word	0x080040d3
 8003fc8:	680b      	ldr	r3, [r1, #0]
 8003fca:	1d1a      	adds	r2, r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	600a      	str	r2, [r1, #0]
 8003fd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0a3      	b.n	8004124 <_printf_i+0x1f4>
 8003fdc:	6825      	ldr	r5, [r4, #0]
 8003fde:	6808      	ldr	r0, [r1, #0]
 8003fe0:	062e      	lsls	r6, r5, #24
 8003fe2:	f100 0304 	add.w	r3, r0, #4
 8003fe6:	d50a      	bpl.n	8003ffe <_printf_i+0xce>
 8003fe8:	6805      	ldr	r5, [r0, #0]
 8003fea:	600b      	str	r3, [r1, #0]
 8003fec:	2d00      	cmp	r5, #0
 8003fee:	da03      	bge.n	8003ff8 <_printf_i+0xc8>
 8003ff0:	232d      	movs	r3, #45	; 0x2d
 8003ff2:	426d      	negs	r5, r5
 8003ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ff8:	485e      	ldr	r0, [pc, #376]	; (8004174 <_printf_i+0x244>)
 8003ffa:	230a      	movs	r3, #10
 8003ffc:	e019      	b.n	8004032 <_printf_i+0x102>
 8003ffe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004002:	6805      	ldr	r5, [r0, #0]
 8004004:	600b      	str	r3, [r1, #0]
 8004006:	bf18      	it	ne
 8004008:	b22d      	sxthne	r5, r5
 800400a:	e7ef      	b.n	8003fec <_printf_i+0xbc>
 800400c:	680b      	ldr	r3, [r1, #0]
 800400e:	6825      	ldr	r5, [r4, #0]
 8004010:	1d18      	adds	r0, r3, #4
 8004012:	6008      	str	r0, [r1, #0]
 8004014:	0628      	lsls	r0, r5, #24
 8004016:	d501      	bpl.n	800401c <_printf_i+0xec>
 8004018:	681d      	ldr	r5, [r3, #0]
 800401a:	e002      	b.n	8004022 <_printf_i+0xf2>
 800401c:	0669      	lsls	r1, r5, #25
 800401e:	d5fb      	bpl.n	8004018 <_printf_i+0xe8>
 8004020:	881d      	ldrh	r5, [r3, #0]
 8004022:	4854      	ldr	r0, [pc, #336]	; (8004174 <_printf_i+0x244>)
 8004024:	2f6f      	cmp	r7, #111	; 0x6f
 8004026:	bf0c      	ite	eq
 8004028:	2308      	moveq	r3, #8
 800402a:	230a      	movne	r3, #10
 800402c:	2100      	movs	r1, #0
 800402e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004032:	6866      	ldr	r6, [r4, #4]
 8004034:	60a6      	str	r6, [r4, #8]
 8004036:	2e00      	cmp	r6, #0
 8004038:	bfa2      	ittt	ge
 800403a:	6821      	ldrge	r1, [r4, #0]
 800403c:	f021 0104 	bicge.w	r1, r1, #4
 8004040:	6021      	strge	r1, [r4, #0]
 8004042:	b90d      	cbnz	r5, 8004048 <_printf_i+0x118>
 8004044:	2e00      	cmp	r6, #0
 8004046:	d04d      	beq.n	80040e4 <_printf_i+0x1b4>
 8004048:	4616      	mov	r6, r2
 800404a:	fbb5 f1f3 	udiv	r1, r5, r3
 800404e:	fb03 5711 	mls	r7, r3, r1, r5
 8004052:	5dc7      	ldrb	r7, [r0, r7]
 8004054:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004058:	462f      	mov	r7, r5
 800405a:	42bb      	cmp	r3, r7
 800405c:	460d      	mov	r5, r1
 800405e:	d9f4      	bls.n	800404a <_printf_i+0x11a>
 8004060:	2b08      	cmp	r3, #8
 8004062:	d10b      	bne.n	800407c <_printf_i+0x14c>
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	07df      	lsls	r7, r3, #31
 8004068:	d508      	bpl.n	800407c <_printf_i+0x14c>
 800406a:	6923      	ldr	r3, [r4, #16]
 800406c:	6861      	ldr	r1, [r4, #4]
 800406e:	4299      	cmp	r1, r3
 8004070:	bfde      	ittt	le
 8004072:	2330      	movle	r3, #48	; 0x30
 8004074:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004078:	f106 36ff 	addle.w	r6, r6, #4294967295
 800407c:	1b92      	subs	r2, r2, r6
 800407e:	6122      	str	r2, [r4, #16]
 8004080:	f8cd a000 	str.w	sl, [sp]
 8004084:	464b      	mov	r3, r9
 8004086:	aa03      	add	r2, sp, #12
 8004088:	4621      	mov	r1, r4
 800408a:	4640      	mov	r0, r8
 800408c:	f7ff fee2 	bl	8003e54 <_printf_common>
 8004090:	3001      	adds	r0, #1
 8004092:	d14c      	bne.n	800412e <_printf_i+0x1fe>
 8004094:	f04f 30ff 	mov.w	r0, #4294967295
 8004098:	b004      	add	sp, #16
 800409a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800409e:	4835      	ldr	r0, [pc, #212]	; (8004174 <_printf_i+0x244>)
 80040a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	680e      	ldr	r6, [r1, #0]
 80040a8:	061f      	lsls	r7, r3, #24
 80040aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80040ae:	600e      	str	r6, [r1, #0]
 80040b0:	d514      	bpl.n	80040dc <_printf_i+0x1ac>
 80040b2:	07d9      	lsls	r1, r3, #31
 80040b4:	bf44      	itt	mi
 80040b6:	f043 0320 	orrmi.w	r3, r3, #32
 80040ba:	6023      	strmi	r3, [r4, #0]
 80040bc:	b91d      	cbnz	r5, 80040c6 <_printf_i+0x196>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	f023 0320 	bic.w	r3, r3, #32
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	2310      	movs	r3, #16
 80040c8:	e7b0      	b.n	800402c <_printf_i+0xfc>
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	f043 0320 	orr.w	r3, r3, #32
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	2378      	movs	r3, #120	; 0x78
 80040d4:	4828      	ldr	r0, [pc, #160]	; (8004178 <_printf_i+0x248>)
 80040d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040da:	e7e3      	b.n	80040a4 <_printf_i+0x174>
 80040dc:	065e      	lsls	r6, r3, #25
 80040de:	bf48      	it	mi
 80040e0:	b2ad      	uxthmi	r5, r5
 80040e2:	e7e6      	b.n	80040b2 <_printf_i+0x182>
 80040e4:	4616      	mov	r6, r2
 80040e6:	e7bb      	b.n	8004060 <_printf_i+0x130>
 80040e8:	680b      	ldr	r3, [r1, #0]
 80040ea:	6826      	ldr	r6, [r4, #0]
 80040ec:	6960      	ldr	r0, [r4, #20]
 80040ee:	1d1d      	adds	r5, r3, #4
 80040f0:	600d      	str	r5, [r1, #0]
 80040f2:	0635      	lsls	r5, r6, #24
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	d501      	bpl.n	80040fc <_printf_i+0x1cc>
 80040f8:	6018      	str	r0, [r3, #0]
 80040fa:	e002      	b.n	8004102 <_printf_i+0x1d2>
 80040fc:	0671      	lsls	r1, r6, #25
 80040fe:	d5fb      	bpl.n	80040f8 <_printf_i+0x1c8>
 8004100:	8018      	strh	r0, [r3, #0]
 8004102:	2300      	movs	r3, #0
 8004104:	6123      	str	r3, [r4, #16]
 8004106:	4616      	mov	r6, r2
 8004108:	e7ba      	b.n	8004080 <_printf_i+0x150>
 800410a:	680b      	ldr	r3, [r1, #0]
 800410c:	1d1a      	adds	r2, r3, #4
 800410e:	600a      	str	r2, [r1, #0]
 8004110:	681e      	ldr	r6, [r3, #0]
 8004112:	6862      	ldr	r2, [r4, #4]
 8004114:	2100      	movs	r1, #0
 8004116:	4630      	mov	r0, r6
 8004118:	f7fc f85a 	bl	80001d0 <memchr>
 800411c:	b108      	cbz	r0, 8004122 <_printf_i+0x1f2>
 800411e:	1b80      	subs	r0, r0, r6
 8004120:	6060      	str	r0, [r4, #4]
 8004122:	6863      	ldr	r3, [r4, #4]
 8004124:	6123      	str	r3, [r4, #16]
 8004126:	2300      	movs	r3, #0
 8004128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800412c:	e7a8      	b.n	8004080 <_printf_i+0x150>
 800412e:	6923      	ldr	r3, [r4, #16]
 8004130:	4632      	mov	r2, r6
 8004132:	4649      	mov	r1, r9
 8004134:	4640      	mov	r0, r8
 8004136:	47d0      	blx	sl
 8004138:	3001      	adds	r0, #1
 800413a:	d0ab      	beq.n	8004094 <_printf_i+0x164>
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	079b      	lsls	r3, r3, #30
 8004140:	d413      	bmi.n	800416a <_printf_i+0x23a>
 8004142:	68e0      	ldr	r0, [r4, #12]
 8004144:	9b03      	ldr	r3, [sp, #12]
 8004146:	4298      	cmp	r0, r3
 8004148:	bfb8      	it	lt
 800414a:	4618      	movlt	r0, r3
 800414c:	e7a4      	b.n	8004098 <_printf_i+0x168>
 800414e:	2301      	movs	r3, #1
 8004150:	4632      	mov	r2, r6
 8004152:	4649      	mov	r1, r9
 8004154:	4640      	mov	r0, r8
 8004156:	47d0      	blx	sl
 8004158:	3001      	adds	r0, #1
 800415a:	d09b      	beq.n	8004094 <_printf_i+0x164>
 800415c:	3501      	adds	r5, #1
 800415e:	68e3      	ldr	r3, [r4, #12]
 8004160:	9903      	ldr	r1, [sp, #12]
 8004162:	1a5b      	subs	r3, r3, r1
 8004164:	42ab      	cmp	r3, r5
 8004166:	dcf2      	bgt.n	800414e <_printf_i+0x21e>
 8004168:	e7eb      	b.n	8004142 <_printf_i+0x212>
 800416a:	2500      	movs	r5, #0
 800416c:	f104 0619 	add.w	r6, r4, #25
 8004170:	e7f5      	b.n	800415e <_printf_i+0x22e>
 8004172:	bf00      	nop
 8004174:	08004871 	.word	0x08004871
 8004178:	08004882 	.word	0x08004882

0800417c <_sbrk_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4d06      	ldr	r5, [pc, #24]	; (8004198 <_sbrk_r+0x1c>)
 8004180:	2300      	movs	r3, #0
 8004182:	4604      	mov	r4, r0
 8004184:	4608      	mov	r0, r1
 8004186:	602b      	str	r3, [r5, #0]
 8004188:	f7fc fd1c 	bl	8000bc4 <_sbrk>
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	d102      	bne.n	8004196 <_sbrk_r+0x1a>
 8004190:	682b      	ldr	r3, [r5, #0]
 8004192:	b103      	cbz	r3, 8004196 <_sbrk_r+0x1a>
 8004194:	6023      	str	r3, [r4, #0]
 8004196:	bd38      	pop	{r3, r4, r5, pc}
 8004198:	20000180 	.word	0x20000180

0800419c <__sread>:
 800419c:	b510      	push	{r4, lr}
 800419e:	460c      	mov	r4, r1
 80041a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a4:	f000 fab4 	bl	8004710 <_read_r>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	bfab      	itete	ge
 80041ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041ae:	89a3      	ldrhlt	r3, [r4, #12]
 80041b0:	181b      	addge	r3, r3, r0
 80041b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041b6:	bfac      	ite	ge
 80041b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80041ba:	81a3      	strhlt	r3, [r4, #12]
 80041bc:	bd10      	pop	{r4, pc}

080041be <__swrite>:
 80041be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c2:	461f      	mov	r7, r3
 80041c4:	898b      	ldrh	r3, [r1, #12]
 80041c6:	05db      	lsls	r3, r3, #23
 80041c8:	4605      	mov	r5, r0
 80041ca:	460c      	mov	r4, r1
 80041cc:	4616      	mov	r6, r2
 80041ce:	d505      	bpl.n	80041dc <__swrite+0x1e>
 80041d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d4:	2302      	movs	r3, #2
 80041d6:	2200      	movs	r2, #0
 80041d8:	f000 f9c8 	bl	800456c <_lseek_r>
 80041dc:	89a3      	ldrh	r3, [r4, #12]
 80041de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041e6:	81a3      	strh	r3, [r4, #12]
 80041e8:	4632      	mov	r2, r6
 80041ea:	463b      	mov	r3, r7
 80041ec:	4628      	mov	r0, r5
 80041ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041f2:	f000 b869 	b.w	80042c8 <_write_r>

080041f6 <__sseek>:
 80041f6:	b510      	push	{r4, lr}
 80041f8:	460c      	mov	r4, r1
 80041fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041fe:	f000 f9b5 	bl	800456c <_lseek_r>
 8004202:	1c43      	adds	r3, r0, #1
 8004204:	89a3      	ldrh	r3, [r4, #12]
 8004206:	bf15      	itete	ne
 8004208:	6560      	strne	r0, [r4, #84]	; 0x54
 800420a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800420e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004212:	81a3      	strheq	r3, [r4, #12]
 8004214:	bf18      	it	ne
 8004216:	81a3      	strhne	r3, [r4, #12]
 8004218:	bd10      	pop	{r4, pc}

0800421a <__sclose>:
 800421a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800421e:	f000 b8d3 	b.w	80043c8 <_close_r>
	...

08004224 <__swbuf_r>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	460e      	mov	r6, r1
 8004228:	4614      	mov	r4, r2
 800422a:	4605      	mov	r5, r0
 800422c:	b118      	cbz	r0, 8004236 <__swbuf_r+0x12>
 800422e:	6983      	ldr	r3, [r0, #24]
 8004230:	b90b      	cbnz	r3, 8004236 <__swbuf_r+0x12>
 8004232:	f7ff fbbb 	bl	80039ac <__sinit>
 8004236:	4b21      	ldr	r3, [pc, #132]	; (80042bc <__swbuf_r+0x98>)
 8004238:	429c      	cmp	r4, r3
 800423a:	d12b      	bne.n	8004294 <__swbuf_r+0x70>
 800423c:	686c      	ldr	r4, [r5, #4]
 800423e:	69a3      	ldr	r3, [r4, #24]
 8004240:	60a3      	str	r3, [r4, #8]
 8004242:	89a3      	ldrh	r3, [r4, #12]
 8004244:	071a      	lsls	r2, r3, #28
 8004246:	d52f      	bpl.n	80042a8 <__swbuf_r+0x84>
 8004248:	6923      	ldr	r3, [r4, #16]
 800424a:	b36b      	cbz	r3, 80042a8 <__swbuf_r+0x84>
 800424c:	6923      	ldr	r3, [r4, #16]
 800424e:	6820      	ldr	r0, [r4, #0]
 8004250:	1ac0      	subs	r0, r0, r3
 8004252:	6963      	ldr	r3, [r4, #20]
 8004254:	b2f6      	uxtb	r6, r6
 8004256:	4283      	cmp	r3, r0
 8004258:	4637      	mov	r7, r6
 800425a:	dc04      	bgt.n	8004266 <__swbuf_r+0x42>
 800425c:	4621      	mov	r1, r4
 800425e:	4628      	mov	r0, r5
 8004260:	f000 f948 	bl	80044f4 <_fflush_r>
 8004264:	bb30      	cbnz	r0, 80042b4 <__swbuf_r+0x90>
 8004266:	68a3      	ldr	r3, [r4, #8]
 8004268:	3b01      	subs	r3, #1
 800426a:	60a3      	str	r3, [r4, #8]
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	6022      	str	r2, [r4, #0]
 8004272:	701e      	strb	r6, [r3, #0]
 8004274:	6963      	ldr	r3, [r4, #20]
 8004276:	3001      	adds	r0, #1
 8004278:	4283      	cmp	r3, r0
 800427a:	d004      	beq.n	8004286 <__swbuf_r+0x62>
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	07db      	lsls	r3, r3, #31
 8004280:	d506      	bpl.n	8004290 <__swbuf_r+0x6c>
 8004282:	2e0a      	cmp	r6, #10
 8004284:	d104      	bne.n	8004290 <__swbuf_r+0x6c>
 8004286:	4621      	mov	r1, r4
 8004288:	4628      	mov	r0, r5
 800428a:	f000 f933 	bl	80044f4 <_fflush_r>
 800428e:	b988      	cbnz	r0, 80042b4 <__swbuf_r+0x90>
 8004290:	4638      	mov	r0, r7
 8004292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <__swbuf_r+0x9c>)
 8004296:	429c      	cmp	r4, r3
 8004298:	d101      	bne.n	800429e <__swbuf_r+0x7a>
 800429a:	68ac      	ldr	r4, [r5, #8]
 800429c:	e7cf      	b.n	800423e <__swbuf_r+0x1a>
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <__swbuf_r+0xa0>)
 80042a0:	429c      	cmp	r4, r3
 80042a2:	bf08      	it	eq
 80042a4:	68ec      	ldreq	r4, [r5, #12]
 80042a6:	e7ca      	b.n	800423e <__swbuf_r+0x1a>
 80042a8:	4621      	mov	r1, r4
 80042aa:	4628      	mov	r0, r5
 80042ac:	f000 f81e 	bl	80042ec <__swsetup_r>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d0cb      	beq.n	800424c <__swbuf_r+0x28>
 80042b4:	f04f 37ff 	mov.w	r7, #4294967295
 80042b8:	e7ea      	b.n	8004290 <__swbuf_r+0x6c>
 80042ba:	bf00      	nop
 80042bc:	08004820 	.word	0x08004820
 80042c0:	08004840 	.word	0x08004840
 80042c4:	08004800 	.word	0x08004800

080042c8 <_write_r>:
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	4d07      	ldr	r5, [pc, #28]	; (80042e8 <_write_r+0x20>)
 80042cc:	4604      	mov	r4, r0
 80042ce:	4608      	mov	r0, r1
 80042d0:	4611      	mov	r1, r2
 80042d2:	2200      	movs	r2, #0
 80042d4:	602a      	str	r2, [r5, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f7fc fc23 	bl	8000b22 <_write>
 80042dc:	1c43      	adds	r3, r0, #1
 80042de:	d102      	bne.n	80042e6 <_write_r+0x1e>
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	b103      	cbz	r3, 80042e6 <_write_r+0x1e>
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
 80042e8:	20000180 	.word	0x20000180

080042ec <__swsetup_r>:
 80042ec:	4b32      	ldr	r3, [pc, #200]	; (80043b8 <__swsetup_r+0xcc>)
 80042ee:	b570      	push	{r4, r5, r6, lr}
 80042f0:	681d      	ldr	r5, [r3, #0]
 80042f2:	4606      	mov	r6, r0
 80042f4:	460c      	mov	r4, r1
 80042f6:	b125      	cbz	r5, 8004302 <__swsetup_r+0x16>
 80042f8:	69ab      	ldr	r3, [r5, #24]
 80042fa:	b913      	cbnz	r3, 8004302 <__swsetup_r+0x16>
 80042fc:	4628      	mov	r0, r5
 80042fe:	f7ff fb55 	bl	80039ac <__sinit>
 8004302:	4b2e      	ldr	r3, [pc, #184]	; (80043bc <__swsetup_r+0xd0>)
 8004304:	429c      	cmp	r4, r3
 8004306:	d10f      	bne.n	8004328 <__swsetup_r+0x3c>
 8004308:	686c      	ldr	r4, [r5, #4]
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004310:	0719      	lsls	r1, r3, #28
 8004312:	d42c      	bmi.n	800436e <__swsetup_r+0x82>
 8004314:	06dd      	lsls	r5, r3, #27
 8004316:	d411      	bmi.n	800433c <__swsetup_r+0x50>
 8004318:	2309      	movs	r3, #9
 800431a:	6033      	str	r3, [r6, #0]
 800431c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004320:	81a3      	strh	r3, [r4, #12]
 8004322:	f04f 30ff 	mov.w	r0, #4294967295
 8004326:	e03e      	b.n	80043a6 <__swsetup_r+0xba>
 8004328:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <__swsetup_r+0xd4>)
 800432a:	429c      	cmp	r4, r3
 800432c:	d101      	bne.n	8004332 <__swsetup_r+0x46>
 800432e:	68ac      	ldr	r4, [r5, #8]
 8004330:	e7eb      	b.n	800430a <__swsetup_r+0x1e>
 8004332:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <__swsetup_r+0xd8>)
 8004334:	429c      	cmp	r4, r3
 8004336:	bf08      	it	eq
 8004338:	68ec      	ldreq	r4, [r5, #12]
 800433a:	e7e6      	b.n	800430a <__swsetup_r+0x1e>
 800433c:	0758      	lsls	r0, r3, #29
 800433e:	d512      	bpl.n	8004366 <__swsetup_r+0x7a>
 8004340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004342:	b141      	cbz	r1, 8004356 <__swsetup_r+0x6a>
 8004344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004348:	4299      	cmp	r1, r3
 800434a:	d002      	beq.n	8004352 <__swsetup_r+0x66>
 800434c:	4630      	mov	r0, r6
 800434e:	f000 f98f 	bl	8004670 <_free_r>
 8004352:	2300      	movs	r3, #0
 8004354:	6363      	str	r3, [r4, #52]	; 0x34
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800435c:	81a3      	strh	r3, [r4, #12]
 800435e:	2300      	movs	r3, #0
 8004360:	6063      	str	r3, [r4, #4]
 8004362:	6923      	ldr	r3, [r4, #16]
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	89a3      	ldrh	r3, [r4, #12]
 8004368:	f043 0308 	orr.w	r3, r3, #8
 800436c:	81a3      	strh	r3, [r4, #12]
 800436e:	6923      	ldr	r3, [r4, #16]
 8004370:	b94b      	cbnz	r3, 8004386 <__swsetup_r+0x9a>
 8004372:	89a3      	ldrh	r3, [r4, #12]
 8004374:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437c:	d003      	beq.n	8004386 <__swsetup_r+0x9a>
 800437e:	4621      	mov	r1, r4
 8004380:	4630      	mov	r0, r6
 8004382:	f000 f929 	bl	80045d8 <__smakebuf_r>
 8004386:	89a0      	ldrh	r0, [r4, #12]
 8004388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800438c:	f010 0301 	ands.w	r3, r0, #1
 8004390:	d00a      	beq.n	80043a8 <__swsetup_r+0xbc>
 8004392:	2300      	movs	r3, #0
 8004394:	60a3      	str	r3, [r4, #8]
 8004396:	6963      	ldr	r3, [r4, #20]
 8004398:	425b      	negs	r3, r3
 800439a:	61a3      	str	r3, [r4, #24]
 800439c:	6923      	ldr	r3, [r4, #16]
 800439e:	b943      	cbnz	r3, 80043b2 <__swsetup_r+0xc6>
 80043a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043a4:	d1ba      	bne.n	800431c <__swsetup_r+0x30>
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
 80043a8:	0781      	lsls	r1, r0, #30
 80043aa:	bf58      	it	pl
 80043ac:	6963      	ldrpl	r3, [r4, #20]
 80043ae:	60a3      	str	r3, [r4, #8]
 80043b0:	e7f4      	b.n	800439c <__swsetup_r+0xb0>
 80043b2:	2000      	movs	r0, #0
 80043b4:	e7f7      	b.n	80043a6 <__swsetup_r+0xba>
 80043b6:	bf00      	nop
 80043b8:	20000010 	.word	0x20000010
 80043bc:	08004820 	.word	0x08004820
 80043c0:	08004840 	.word	0x08004840
 80043c4:	08004800 	.word	0x08004800

080043c8 <_close_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	4d06      	ldr	r5, [pc, #24]	; (80043e4 <_close_r+0x1c>)
 80043cc:	2300      	movs	r3, #0
 80043ce:	4604      	mov	r4, r0
 80043d0:	4608      	mov	r0, r1
 80043d2:	602b      	str	r3, [r5, #0]
 80043d4:	f7fc fbc1 	bl	8000b5a <_close>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	d102      	bne.n	80043e2 <_close_r+0x1a>
 80043dc:	682b      	ldr	r3, [r5, #0]
 80043de:	b103      	cbz	r3, 80043e2 <_close_r+0x1a>
 80043e0:	6023      	str	r3, [r4, #0]
 80043e2:	bd38      	pop	{r3, r4, r5, pc}
 80043e4:	20000180 	.word	0x20000180

080043e8 <__sflush_r>:
 80043e8:	898a      	ldrh	r2, [r1, #12]
 80043ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ee:	4605      	mov	r5, r0
 80043f0:	0710      	lsls	r0, r2, #28
 80043f2:	460c      	mov	r4, r1
 80043f4:	d458      	bmi.n	80044a8 <__sflush_r+0xc0>
 80043f6:	684b      	ldr	r3, [r1, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	dc05      	bgt.n	8004408 <__sflush_r+0x20>
 80043fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	dc02      	bgt.n	8004408 <__sflush_r+0x20>
 8004402:	2000      	movs	r0, #0
 8004404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800440a:	2e00      	cmp	r6, #0
 800440c:	d0f9      	beq.n	8004402 <__sflush_r+0x1a>
 800440e:	2300      	movs	r3, #0
 8004410:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004414:	682f      	ldr	r7, [r5, #0]
 8004416:	602b      	str	r3, [r5, #0]
 8004418:	d032      	beq.n	8004480 <__sflush_r+0x98>
 800441a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800441c:	89a3      	ldrh	r3, [r4, #12]
 800441e:	075a      	lsls	r2, r3, #29
 8004420:	d505      	bpl.n	800442e <__sflush_r+0x46>
 8004422:	6863      	ldr	r3, [r4, #4]
 8004424:	1ac0      	subs	r0, r0, r3
 8004426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004428:	b10b      	cbz	r3, 800442e <__sflush_r+0x46>
 800442a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800442c:	1ac0      	subs	r0, r0, r3
 800442e:	2300      	movs	r3, #0
 8004430:	4602      	mov	r2, r0
 8004432:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004434:	6a21      	ldr	r1, [r4, #32]
 8004436:	4628      	mov	r0, r5
 8004438:	47b0      	blx	r6
 800443a:	1c43      	adds	r3, r0, #1
 800443c:	89a3      	ldrh	r3, [r4, #12]
 800443e:	d106      	bne.n	800444e <__sflush_r+0x66>
 8004440:	6829      	ldr	r1, [r5, #0]
 8004442:	291d      	cmp	r1, #29
 8004444:	d82c      	bhi.n	80044a0 <__sflush_r+0xb8>
 8004446:	4a2a      	ldr	r2, [pc, #168]	; (80044f0 <__sflush_r+0x108>)
 8004448:	40ca      	lsrs	r2, r1
 800444a:	07d6      	lsls	r6, r2, #31
 800444c:	d528      	bpl.n	80044a0 <__sflush_r+0xb8>
 800444e:	2200      	movs	r2, #0
 8004450:	6062      	str	r2, [r4, #4]
 8004452:	04d9      	lsls	r1, r3, #19
 8004454:	6922      	ldr	r2, [r4, #16]
 8004456:	6022      	str	r2, [r4, #0]
 8004458:	d504      	bpl.n	8004464 <__sflush_r+0x7c>
 800445a:	1c42      	adds	r2, r0, #1
 800445c:	d101      	bne.n	8004462 <__sflush_r+0x7a>
 800445e:	682b      	ldr	r3, [r5, #0]
 8004460:	b903      	cbnz	r3, 8004464 <__sflush_r+0x7c>
 8004462:	6560      	str	r0, [r4, #84]	; 0x54
 8004464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004466:	602f      	str	r7, [r5, #0]
 8004468:	2900      	cmp	r1, #0
 800446a:	d0ca      	beq.n	8004402 <__sflush_r+0x1a>
 800446c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004470:	4299      	cmp	r1, r3
 8004472:	d002      	beq.n	800447a <__sflush_r+0x92>
 8004474:	4628      	mov	r0, r5
 8004476:	f000 f8fb 	bl	8004670 <_free_r>
 800447a:	2000      	movs	r0, #0
 800447c:	6360      	str	r0, [r4, #52]	; 0x34
 800447e:	e7c1      	b.n	8004404 <__sflush_r+0x1c>
 8004480:	6a21      	ldr	r1, [r4, #32]
 8004482:	2301      	movs	r3, #1
 8004484:	4628      	mov	r0, r5
 8004486:	47b0      	blx	r6
 8004488:	1c41      	adds	r1, r0, #1
 800448a:	d1c7      	bne.n	800441c <__sflush_r+0x34>
 800448c:	682b      	ldr	r3, [r5, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0c4      	beq.n	800441c <__sflush_r+0x34>
 8004492:	2b1d      	cmp	r3, #29
 8004494:	d001      	beq.n	800449a <__sflush_r+0xb2>
 8004496:	2b16      	cmp	r3, #22
 8004498:	d101      	bne.n	800449e <__sflush_r+0xb6>
 800449a:	602f      	str	r7, [r5, #0]
 800449c:	e7b1      	b.n	8004402 <__sflush_r+0x1a>
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044a4:	81a3      	strh	r3, [r4, #12]
 80044a6:	e7ad      	b.n	8004404 <__sflush_r+0x1c>
 80044a8:	690f      	ldr	r7, [r1, #16]
 80044aa:	2f00      	cmp	r7, #0
 80044ac:	d0a9      	beq.n	8004402 <__sflush_r+0x1a>
 80044ae:	0793      	lsls	r3, r2, #30
 80044b0:	680e      	ldr	r6, [r1, #0]
 80044b2:	bf08      	it	eq
 80044b4:	694b      	ldreq	r3, [r1, #20]
 80044b6:	600f      	str	r7, [r1, #0]
 80044b8:	bf18      	it	ne
 80044ba:	2300      	movne	r3, #0
 80044bc:	eba6 0807 	sub.w	r8, r6, r7
 80044c0:	608b      	str	r3, [r1, #8]
 80044c2:	f1b8 0f00 	cmp.w	r8, #0
 80044c6:	dd9c      	ble.n	8004402 <__sflush_r+0x1a>
 80044c8:	6a21      	ldr	r1, [r4, #32]
 80044ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044cc:	4643      	mov	r3, r8
 80044ce:	463a      	mov	r2, r7
 80044d0:	4628      	mov	r0, r5
 80044d2:	47b0      	blx	r6
 80044d4:	2800      	cmp	r0, #0
 80044d6:	dc06      	bgt.n	80044e6 <__sflush_r+0xfe>
 80044d8:	89a3      	ldrh	r3, [r4, #12]
 80044da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044de:	81a3      	strh	r3, [r4, #12]
 80044e0:	f04f 30ff 	mov.w	r0, #4294967295
 80044e4:	e78e      	b.n	8004404 <__sflush_r+0x1c>
 80044e6:	4407      	add	r7, r0
 80044e8:	eba8 0800 	sub.w	r8, r8, r0
 80044ec:	e7e9      	b.n	80044c2 <__sflush_r+0xda>
 80044ee:	bf00      	nop
 80044f0:	20400001 	.word	0x20400001

080044f4 <_fflush_r>:
 80044f4:	b538      	push	{r3, r4, r5, lr}
 80044f6:	690b      	ldr	r3, [r1, #16]
 80044f8:	4605      	mov	r5, r0
 80044fa:	460c      	mov	r4, r1
 80044fc:	b913      	cbnz	r3, 8004504 <_fflush_r+0x10>
 80044fe:	2500      	movs	r5, #0
 8004500:	4628      	mov	r0, r5
 8004502:	bd38      	pop	{r3, r4, r5, pc}
 8004504:	b118      	cbz	r0, 800450e <_fflush_r+0x1a>
 8004506:	6983      	ldr	r3, [r0, #24]
 8004508:	b90b      	cbnz	r3, 800450e <_fflush_r+0x1a>
 800450a:	f7ff fa4f 	bl	80039ac <__sinit>
 800450e:	4b14      	ldr	r3, [pc, #80]	; (8004560 <_fflush_r+0x6c>)
 8004510:	429c      	cmp	r4, r3
 8004512:	d11b      	bne.n	800454c <_fflush_r+0x58>
 8004514:	686c      	ldr	r4, [r5, #4]
 8004516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0ef      	beq.n	80044fe <_fflush_r+0xa>
 800451e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004520:	07d0      	lsls	r0, r2, #31
 8004522:	d404      	bmi.n	800452e <_fflush_r+0x3a>
 8004524:	0599      	lsls	r1, r3, #22
 8004526:	d402      	bmi.n	800452e <_fflush_r+0x3a>
 8004528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800452a:	f7ff fadd 	bl	8003ae8 <__retarget_lock_acquire_recursive>
 800452e:	4628      	mov	r0, r5
 8004530:	4621      	mov	r1, r4
 8004532:	f7ff ff59 	bl	80043e8 <__sflush_r>
 8004536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004538:	07da      	lsls	r2, r3, #31
 800453a:	4605      	mov	r5, r0
 800453c:	d4e0      	bmi.n	8004500 <_fflush_r+0xc>
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	059b      	lsls	r3, r3, #22
 8004542:	d4dd      	bmi.n	8004500 <_fflush_r+0xc>
 8004544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004546:	f7ff fad0 	bl	8003aea <__retarget_lock_release_recursive>
 800454a:	e7d9      	b.n	8004500 <_fflush_r+0xc>
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <_fflush_r+0x70>)
 800454e:	429c      	cmp	r4, r3
 8004550:	d101      	bne.n	8004556 <_fflush_r+0x62>
 8004552:	68ac      	ldr	r4, [r5, #8]
 8004554:	e7df      	b.n	8004516 <_fflush_r+0x22>
 8004556:	4b04      	ldr	r3, [pc, #16]	; (8004568 <_fflush_r+0x74>)
 8004558:	429c      	cmp	r4, r3
 800455a:	bf08      	it	eq
 800455c:	68ec      	ldreq	r4, [r5, #12]
 800455e:	e7da      	b.n	8004516 <_fflush_r+0x22>
 8004560:	08004820 	.word	0x08004820
 8004564:	08004840 	.word	0x08004840
 8004568:	08004800 	.word	0x08004800

0800456c <_lseek_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d07      	ldr	r5, [pc, #28]	; (800458c <_lseek_r+0x20>)
 8004570:	4604      	mov	r4, r0
 8004572:	4608      	mov	r0, r1
 8004574:	4611      	mov	r1, r2
 8004576:	2200      	movs	r2, #0
 8004578:	602a      	str	r2, [r5, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	f7fc fb14 	bl	8000ba8 <_lseek>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d102      	bne.n	800458a <_lseek_r+0x1e>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	b103      	cbz	r3, 800458a <_lseek_r+0x1e>
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	20000180 	.word	0x20000180

08004590 <__swhatbuf_r>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	460e      	mov	r6, r1
 8004594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004598:	2900      	cmp	r1, #0
 800459a:	b096      	sub	sp, #88	; 0x58
 800459c:	4614      	mov	r4, r2
 800459e:	461d      	mov	r5, r3
 80045a0:	da07      	bge.n	80045b2 <__swhatbuf_r+0x22>
 80045a2:	2300      	movs	r3, #0
 80045a4:	602b      	str	r3, [r5, #0]
 80045a6:	89b3      	ldrh	r3, [r6, #12]
 80045a8:	061a      	lsls	r2, r3, #24
 80045aa:	d410      	bmi.n	80045ce <__swhatbuf_r+0x3e>
 80045ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045b0:	e00e      	b.n	80045d0 <__swhatbuf_r+0x40>
 80045b2:	466a      	mov	r2, sp
 80045b4:	f000 f8be 	bl	8004734 <_fstat_r>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	dbf2      	blt.n	80045a2 <__swhatbuf_r+0x12>
 80045bc:	9a01      	ldr	r2, [sp, #4]
 80045be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045c6:	425a      	negs	r2, r3
 80045c8:	415a      	adcs	r2, r3
 80045ca:	602a      	str	r2, [r5, #0]
 80045cc:	e7ee      	b.n	80045ac <__swhatbuf_r+0x1c>
 80045ce:	2340      	movs	r3, #64	; 0x40
 80045d0:	2000      	movs	r0, #0
 80045d2:	6023      	str	r3, [r4, #0]
 80045d4:	b016      	add	sp, #88	; 0x58
 80045d6:	bd70      	pop	{r4, r5, r6, pc}

080045d8 <__smakebuf_r>:
 80045d8:	898b      	ldrh	r3, [r1, #12]
 80045da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045dc:	079d      	lsls	r5, r3, #30
 80045de:	4606      	mov	r6, r0
 80045e0:	460c      	mov	r4, r1
 80045e2:	d507      	bpl.n	80045f4 <__smakebuf_r+0x1c>
 80045e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	6123      	str	r3, [r4, #16]
 80045ec:	2301      	movs	r3, #1
 80045ee:	6163      	str	r3, [r4, #20]
 80045f0:	b002      	add	sp, #8
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
 80045f4:	ab01      	add	r3, sp, #4
 80045f6:	466a      	mov	r2, sp
 80045f8:	f7ff ffca 	bl	8004590 <__swhatbuf_r>
 80045fc:	9900      	ldr	r1, [sp, #0]
 80045fe:	4605      	mov	r5, r0
 8004600:	4630      	mov	r0, r6
 8004602:	f7ff fa73 	bl	8003aec <_malloc_r>
 8004606:	b948      	cbnz	r0, 800461c <__smakebuf_r+0x44>
 8004608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800460c:	059a      	lsls	r2, r3, #22
 800460e:	d4ef      	bmi.n	80045f0 <__smakebuf_r+0x18>
 8004610:	f023 0303 	bic.w	r3, r3, #3
 8004614:	f043 0302 	orr.w	r3, r3, #2
 8004618:	81a3      	strh	r3, [r4, #12]
 800461a:	e7e3      	b.n	80045e4 <__smakebuf_r+0xc>
 800461c:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <__smakebuf_r+0x7c>)
 800461e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004620:	89a3      	ldrh	r3, [r4, #12]
 8004622:	6020      	str	r0, [r4, #0]
 8004624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004628:	81a3      	strh	r3, [r4, #12]
 800462a:	9b00      	ldr	r3, [sp, #0]
 800462c:	6163      	str	r3, [r4, #20]
 800462e:	9b01      	ldr	r3, [sp, #4]
 8004630:	6120      	str	r0, [r4, #16]
 8004632:	b15b      	cbz	r3, 800464c <__smakebuf_r+0x74>
 8004634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004638:	4630      	mov	r0, r6
 800463a:	f000 f88d 	bl	8004758 <_isatty_r>
 800463e:	b128      	cbz	r0, 800464c <__smakebuf_r+0x74>
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	81a3      	strh	r3, [r4, #12]
 800464c:	89a0      	ldrh	r0, [r4, #12]
 800464e:	4305      	orrs	r5, r0
 8004650:	81a5      	strh	r5, [r4, #12]
 8004652:	e7cd      	b.n	80045f0 <__smakebuf_r+0x18>
 8004654:	08003945 	.word	0x08003945

08004658 <__malloc_lock>:
 8004658:	4801      	ldr	r0, [pc, #4]	; (8004660 <__malloc_lock+0x8>)
 800465a:	f7ff ba45 	b.w	8003ae8 <__retarget_lock_acquire_recursive>
 800465e:	bf00      	nop
 8004660:	20000178 	.word	0x20000178

08004664 <__malloc_unlock>:
 8004664:	4801      	ldr	r0, [pc, #4]	; (800466c <__malloc_unlock+0x8>)
 8004666:	f7ff ba40 	b.w	8003aea <__retarget_lock_release_recursive>
 800466a:	bf00      	nop
 800466c:	20000178 	.word	0x20000178

08004670 <_free_r>:
 8004670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004672:	2900      	cmp	r1, #0
 8004674:	d048      	beq.n	8004708 <_free_r+0x98>
 8004676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800467a:	9001      	str	r0, [sp, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f1a1 0404 	sub.w	r4, r1, #4
 8004682:	bfb8      	it	lt
 8004684:	18e4      	addlt	r4, r4, r3
 8004686:	f7ff ffe7 	bl	8004658 <__malloc_lock>
 800468a:	4a20      	ldr	r2, [pc, #128]	; (800470c <_free_r+0x9c>)
 800468c:	9801      	ldr	r0, [sp, #4]
 800468e:	6813      	ldr	r3, [r2, #0]
 8004690:	4615      	mov	r5, r2
 8004692:	b933      	cbnz	r3, 80046a2 <_free_r+0x32>
 8004694:	6063      	str	r3, [r4, #4]
 8004696:	6014      	str	r4, [r2, #0]
 8004698:	b003      	add	sp, #12
 800469a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800469e:	f7ff bfe1 	b.w	8004664 <__malloc_unlock>
 80046a2:	42a3      	cmp	r3, r4
 80046a4:	d90b      	bls.n	80046be <_free_r+0x4e>
 80046a6:	6821      	ldr	r1, [r4, #0]
 80046a8:	1862      	adds	r2, r4, r1
 80046aa:	4293      	cmp	r3, r2
 80046ac:	bf04      	itt	eq
 80046ae:	681a      	ldreq	r2, [r3, #0]
 80046b0:	685b      	ldreq	r3, [r3, #4]
 80046b2:	6063      	str	r3, [r4, #4]
 80046b4:	bf04      	itt	eq
 80046b6:	1852      	addeq	r2, r2, r1
 80046b8:	6022      	streq	r2, [r4, #0]
 80046ba:	602c      	str	r4, [r5, #0]
 80046bc:	e7ec      	b.n	8004698 <_free_r+0x28>
 80046be:	461a      	mov	r2, r3
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	b10b      	cbz	r3, 80046c8 <_free_r+0x58>
 80046c4:	42a3      	cmp	r3, r4
 80046c6:	d9fa      	bls.n	80046be <_free_r+0x4e>
 80046c8:	6811      	ldr	r1, [r2, #0]
 80046ca:	1855      	adds	r5, r2, r1
 80046cc:	42a5      	cmp	r5, r4
 80046ce:	d10b      	bne.n	80046e8 <_free_r+0x78>
 80046d0:	6824      	ldr	r4, [r4, #0]
 80046d2:	4421      	add	r1, r4
 80046d4:	1854      	adds	r4, r2, r1
 80046d6:	42a3      	cmp	r3, r4
 80046d8:	6011      	str	r1, [r2, #0]
 80046da:	d1dd      	bne.n	8004698 <_free_r+0x28>
 80046dc:	681c      	ldr	r4, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	6053      	str	r3, [r2, #4]
 80046e2:	4421      	add	r1, r4
 80046e4:	6011      	str	r1, [r2, #0]
 80046e6:	e7d7      	b.n	8004698 <_free_r+0x28>
 80046e8:	d902      	bls.n	80046f0 <_free_r+0x80>
 80046ea:	230c      	movs	r3, #12
 80046ec:	6003      	str	r3, [r0, #0]
 80046ee:	e7d3      	b.n	8004698 <_free_r+0x28>
 80046f0:	6825      	ldr	r5, [r4, #0]
 80046f2:	1961      	adds	r1, r4, r5
 80046f4:	428b      	cmp	r3, r1
 80046f6:	bf04      	itt	eq
 80046f8:	6819      	ldreq	r1, [r3, #0]
 80046fa:	685b      	ldreq	r3, [r3, #4]
 80046fc:	6063      	str	r3, [r4, #4]
 80046fe:	bf04      	itt	eq
 8004700:	1949      	addeq	r1, r1, r5
 8004702:	6021      	streq	r1, [r4, #0]
 8004704:	6054      	str	r4, [r2, #4]
 8004706:	e7c7      	b.n	8004698 <_free_r+0x28>
 8004708:	b003      	add	sp, #12
 800470a:	bd30      	pop	{r4, r5, pc}
 800470c:	20000098 	.word	0x20000098

08004710 <_read_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	4d07      	ldr	r5, [pc, #28]	; (8004730 <_read_r+0x20>)
 8004714:	4604      	mov	r4, r0
 8004716:	4608      	mov	r0, r1
 8004718:	4611      	mov	r1, r2
 800471a:	2200      	movs	r2, #0
 800471c:	602a      	str	r2, [r5, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	f7fc f9e2 	bl	8000ae8 <_read>
 8004724:	1c43      	adds	r3, r0, #1
 8004726:	d102      	bne.n	800472e <_read_r+0x1e>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	b103      	cbz	r3, 800472e <_read_r+0x1e>
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	bd38      	pop	{r3, r4, r5, pc}
 8004730:	20000180 	.word	0x20000180

08004734 <_fstat_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4d07      	ldr	r5, [pc, #28]	; (8004754 <_fstat_r+0x20>)
 8004738:	2300      	movs	r3, #0
 800473a:	4604      	mov	r4, r0
 800473c:	4608      	mov	r0, r1
 800473e:	4611      	mov	r1, r2
 8004740:	602b      	str	r3, [r5, #0]
 8004742:	f7fc fa16 	bl	8000b72 <_fstat>
 8004746:	1c43      	adds	r3, r0, #1
 8004748:	d102      	bne.n	8004750 <_fstat_r+0x1c>
 800474a:	682b      	ldr	r3, [r5, #0]
 800474c:	b103      	cbz	r3, 8004750 <_fstat_r+0x1c>
 800474e:	6023      	str	r3, [r4, #0]
 8004750:	bd38      	pop	{r3, r4, r5, pc}
 8004752:	bf00      	nop
 8004754:	20000180 	.word	0x20000180

08004758 <_isatty_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4d06      	ldr	r5, [pc, #24]	; (8004774 <_isatty_r+0x1c>)
 800475c:	2300      	movs	r3, #0
 800475e:	4604      	mov	r4, r0
 8004760:	4608      	mov	r0, r1
 8004762:	602b      	str	r3, [r5, #0]
 8004764:	f7fc fa15 	bl	8000b92 <_isatty>
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	d102      	bne.n	8004772 <_isatty_r+0x1a>
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	b103      	cbz	r3, 8004772 <_isatty_r+0x1a>
 8004770:	6023      	str	r3, [r4, #0]
 8004772:	bd38      	pop	{r3, r4, r5, pc}
 8004774:	20000180 	.word	0x20000180

08004778 <_init>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr

08004784 <_fini>:
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004786:	bf00      	nop
 8004788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478a:	bc08      	pop	{r3}
 800478c:	469e      	mov	lr, r3
 800478e:	4770      	bx	lr
